// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.9.2 (stable) (Wed Aug 27 03:49:40 2025 -0700) on "windows_x64"
// Module: packages/logging/logging
// Flags: enableAsserts(true)
define(['dart_sdk'], (function load__packages__logging__logging(dart_sdk) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var level = Object.create(dart.library);
  var logging = Object.create(dart.library);
  var logger = Object.create(dart.library);
  var log_record = Object.create(dart.library);
  var $compareTo = dartx.compareTo;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $putIfAbsent = dartx.putIfAbsent;
  var $startsWith = dartx.startsWith;
  var $endsWith = dartx.endsWith;
  var $lastIndexOf = dartx.lastIndexOf;
  var $substring = dartx.substring;
  var $values = dartx.values;
  var T = {
    Level: () => (T.Level = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__level|Level", true)))(),
    StringAndintToLevel: () => (T.StringAndintToLevel = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__level|Level(core|String,core|int)", true)))(),
    LevelTobool: () => (T.LevelTobool = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool(logging__src__level|Level)", true)))(),
    ObjectNToint: () => (T.ObjectNToint = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int(core|Object?)", true)))(),
    String: () => (T.String = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String", true)))(),
    int: () => (T.int = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int", true)))(),
    ListOfLevel: () => (T.ListOfLevel = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<logging__src__level|Level>", true)))(),
    UnmodifiableMapViewOfString$Logger: () => (T.UnmodifiableMapViewOfString$Logger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "collection|UnmodifiableMapView<core|String,logging__src__logger|Logger>", true)))(),
    Logger: () => (T.Logger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger", true)))(),
    VoidToLogger: () => (T.VoidToLogger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger()", true)))(),
    IdentityMapOfString$Logger: () => (T.IdentityMapOfString$Logger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,logging__src__logger|Logger>", true)))(),
    StreamControllerOfLevelN: () => (T.StreamControllerOfLevelN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|StreamController<logging__src__level|Level?>", true)))(),
    LevelN: () => (T.LevelN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__level|Level?", true)))(),
    Function: () => (T.Function = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Function", true)))(),
    VoidToObjectN: () => (T.VoidToObjectN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Object?()", true)))(),
    StreamControllerOfLogRecord: () => (T.StreamControllerOfLogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|StreamController<logging__src__log_record|LogRecord>", true)))(),
    LogRecord: () => (T.LogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__log_record|LogRecord", true)))(),
    StringToLogger: () => (T.StringToLogger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger(core|String)", true)))(),
    StringAndLoggerNAndMapOfString$LoggerToLogger: () => (T.StringAndLoggerNAndMapOfString$LoggerToLogger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger(core|String,logging__src__logger|Logger?,core|Map<core|String,logging__src__logger|Logger>)", true)))(),
    StreamOfLevelN: () => (T.StreamOfLevelN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Stream<logging__src__level|Level?>", true)))(),
    StreamOfLogRecord: () => (T.StreamOfLogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Stream<logging__src__log_record|LogRecord>", true)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~()", true)))(),
    LevelAndObjectNAndObjectN__Tovoid: () => (T.LevelAndObjectNAndObjectN__Tovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(logging__src__level|Level,core|Object?[core|Object?,core|StackTrace?,async|Zone?])", true)))(),
    ObjectNAndObjectNAndStackTraceNTovoid: () => (T.ObjectNAndObjectNAndStackTraceNTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|Object?[core|Object?,core|StackTrace?])", true)))(),
    VoidToStreamOfLogRecord: () => (T.VoidToStreamOfLogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Stream<logging__src__log_record|LogRecord>()", true)))(),
    LogRecordTovoid: () => (T.LogRecordTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(logging__src__log_record|LogRecord)", true)))(),
    IterableOfLogger: () => (T.IterableOfLogger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Iterable<logging__src__logger|Logger>", true)))(),
    LoggerN: () => (T.LoggerN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger?", true)))(),
    MapOfString$Logger: () => (T.MapOfString$Logger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<core|String,logging__src__logger|Logger>", true)))(),
    StreamControllerNOfLogRecord: () => (T.StreamControllerNOfLogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|StreamController<logging__src__log_record|LogRecord>?", true)))(),
    StreamControllerNOfLevelN: () => (T.StreamControllerNOfLevelN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|StreamController<logging__src__level|Level?>?", true)))(),
    LevelAndStringAndString__ToLogRecord: () => (T.LevelAndStringAndString__ToLogRecord = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__log_record|LogRecord(logging__src__level|Level,core|String,core|String[core|Object?,core|StackTrace?,async|Zone?,core|Object?])", true)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Object?", true)))(),
    DateTime: () => (T.DateTime = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|DateTime", true)))(),
    StackTraceN: () => (T.StackTraceN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|StackTrace?", true)))(),
    ZoneN: () => (T.ZoneN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Zone?", true)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        [value]: 0,
        [name]: "ALL"
      }, level.Level.prototype));
    },
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [value]: 2000,
        [name]: "OFF"
      }, level.Level.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [value]: 300,
        [name]: "FINEST"
      }, level.Level.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [value]: 400,
        [name]: "FINER"
      }, level.Level.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [value]: 500,
        [name]: "FINE"
      }, level.Level.prototype));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        [value]: 700,
        [name]: "CONFIG"
      }, level.Level.prototype));
    },
    get C6() {
      return C[6] = dart.const(Object.setPrototypeOf({
        [value]: 800,
        [name]: "INFO"
      }, level.Level.prototype));
    },
    get C7() {
      return C[7] = dart.const(Object.setPrototypeOf({
        [value]: 900,
        [name]: "WARNING"
      }, level.Level.prototype));
    },
    get C8() {
      return C[8] = dart.const(Object.setPrototypeOf({
        [value]: 1000,
        [name]: "SEVERE"
      }, level.Level.prototype));
    },
    get C9() {
      return C[9] = dart.const(Object.setPrototypeOf({
        [value]: 1200,
        [name]: "SHOUT"
      }, level.Level.prototype));
    },
    get C10() {
      return C[10] = dart.constList(T.Level(), [C[0] || CT.C0, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[1] || CT.C1]);
    }
  });
  var C = Array(11).fill(void 0);
  var I = [
    "package:logging/src/level.dart",
    "dart:core",
    "org-dartlang-app:///packages/logging/src/logger.dart",
    "package:logging/src/logger.dart",
    "dart:async",
    "package:logging/src/log_record.dart"
  ];
  var name = dart.privateName(level, "Level.name");
  var value = dart.privateName(level, "Level.value");
  var _is = dart.privateName(dart_rti, "_is");
  var _as = dart.privateName(dart_rti, "_as");
  level.Level = class Level extends core.Object {
    get name() {
      return this[name];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value];
    }
    set value(value) {
      super.value = value;
    }
    static ['_#new#tearOff'](name, value) {
      return new level.Level.new(name, value);
    }
    _equals(other) {
      if (other == null) return false;
      return T.Level()[_is](other) && this.value === other.value;
    }
    ['<'](other) {
      return this.value < other.value;
    }
    ['<='](other) {
      return this.value <= other.value;
    }
    ['>'](other) {
      return this.value > other.value;
    }
    ['>='](other) {
      return this.value >= other.value;
    }
    compareTo(other) {
      T.Level()[_as](other);
      return this.value - other.value;
    }
    get hashCode() {
      return this.value;
    }
    toString() {
      return this.name;
    }
  };
  (level.Level.new = function(name$, value$) {
    this[name] = name$;
    this[value] = value$;
    ;
  }).prototype = level.Level.prototype;
  dart.lazyFn(level.Level['_#new#tearOff'], () => T.StringAndintToLevel());
  dart.addRtiResources(level.Level, ["logging__src__level|Level", "core|Comparable"]);
  dart.setMethodSignature(level.Level, () => dart.global.Object.setPrototypeOf({
    '<': _ti => T.LevelTobool(),
    '<=': _ti => T.LevelTobool(),
    '>': _ti => T.LevelTobool(),
    '>=': _ti => T.LevelTobool(),
    compareTo: _ti => T.ObjectNToint(),
    [$compareTo]: _ti => T.ObjectNToint()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(level.Level))));
  dart.setMethodsImmediateTargetSignature(level.Level, () => dart.global.Object.setPrototypeOf({
    _equals: "package:logging/src/level.dart:Level",
    '<': "package:logging/src/level.dart:Level",
    '<=': "package:logging/src/level.dart:Level",
    '>': "package:logging/src/level.dart:Level",
    '>=': "package:logging/src/level.dart:Level",
    compareTo: "package:logging/src/level.dart:Level",
    toString: "package:logging/src/level.dart:Level"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(level.Level))));
  dart.setLibraryUri(level.Level, I[0]);
  dart.setFieldSignature(level.Level, () => dart.global.Object.setPrototypeOf({
    name: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    value: {
      type: _ti => T.int(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(level.Level))));
  dart.setStaticFieldSignature(level.Level, () => ['ALL', 'OFF', 'FINEST', 'FINER', 'FINE', 'CONFIG', 'INFO', 'WARNING', 'SEVERE', 'SHOUT', 'LEVELS']);
  dart.defineExtensionMethods(level.Level, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(level.Level, ['hashCode']);
  dart.defineLazy(level.Level, {
    /*level.Level.ALL*/get ALL() {
      return C[0] || CT.C0;
    },
    /*level.Level.OFF*/get OFF() {
      return C[1] || CT.C1;
    },
    /*level.Level.FINEST*/get FINEST() {
      return C[2] || CT.C2;
    },
    /*level.Level.FINER*/get FINER() {
      return C[3] || CT.C3;
    },
    /*level.Level.FINE*/get FINE() {
      return C[4] || CT.C4;
    },
    /*level.Level.CONFIG*/get CONFIG() {
      return C[5] || CT.C5;
    },
    /*level.Level.INFO*/get INFO() {
      return C[6] || CT.C6;
    },
    /*level.Level.WARNING*/get WARNING() {
      return C[7] || CT.C7;
    },
    /*level.Level.SEVERE*/get SEVERE() {
      return C[8] || CT.C8;
    },
    /*level.Level.SHOUT*/get SHOUT() {
      return C[9] || CT.C9;
    },
    /*level.Level.LEVELS*/get LEVELS() {
      return C[10] || CT.C10;
    }
  });
  (function() {
  }).prototype = level;
  (function() {
  }).prototype = logging;
  var name$ = dart.privateName(logger, "Logger.name");
  var parent = dart.privateName(logger, "Logger.parent");
  var children = dart.privateName(logger, "Logger.children");
  var _level = dart.privateName(logger, "_level");
  var _controller = dart.privateName(logger, "_controller");
  var _levelChangedController = dart.privateName(logger, "_levelChangedController");
  var _children = dart.privateName(logger, "_children");
  var _getStream = dart.privateName(logger, "_getStream");
  var _publish = dart.privateName(logger, "_publish");
  logger.Logger = class Logger extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get parent() {
      return this[parent];
    }
    set parent(value) {
      super.parent = value;
    }
    get children() {
      return this[children];
    }
    set children(value) {
      super.children = value;
    }
    get fullName() {
      let t$360, t$360$;
      return dart.test((t$360$ = (t$360 = this.parent, t$360 == null ? null : t$360.name[$isNotEmpty]), t$360$ == null ? false : t$360$)) ? dart.nullCheck(this.parent).fullName + "." + this.name : this.name;
    }
    static new(name) {
      return logger.Logger._loggers[$putIfAbsent](name, dart.fn(() => logger.Logger._named(name), T.VoidToLogger()));
    }
    static ['_#new#tearOff'](name) {
      return logger.Logger.new(name);
    }
    static detached(name) {
      return new logger.Logger._internal(name, null, new _js_helper.IdentityMap.new(T.IdentityMapOfString$Logger()));
    }
    static ['_#detached#tearOff'](name) {
      return logger.Logger.detached(name);
    }
    static _named(name) {
      if (name[$startsWith](".")) {
        dart.throw(new core.ArgumentError.new("name shouldn't start with a '.'"));
      }
      if (name[$endsWith](".")) {
        dart.throw(new core.ArgumentError.new("name shouldn't end with a '.'"));
      }
      let dot = name[$lastIndexOf](".");
      let parent = null;
      let thisName = null;
      if (dot === -1) {
        if (name !== "") parent = logger.Logger.new("");
        thisName = name;
      } else {
        parent = logger.Logger.new(name[$substring](0, dot));
        thisName = name[$substring](dot + 1);
      }
      return new logger.Logger._internal(thisName, parent, new _js_helper.IdentityMap.new(T.IdentityMapOfString$Logger()));
    }
    static ['_#_named#tearOff'](name) {
      return logger.Logger._named(name);
    }
    static ['_#_internal#tearOff'](name, parent, children) {
      return new logger.Logger._internal(name, parent, children);
    }
    get level() {
      let t$360;
      let effectiveLevel = null;
      if (this.parent == null) {
        effectiveLevel = dart.nullCheck(this[_level]);
      } else if (!logger.hierarchicalLoggingEnabled) {
        effectiveLevel = dart.nullCheck(logger.Logger.root[_level]);
      } else {
        effectiveLevel = (t$360 = this[_level], t$360 == null ? dart.nullCheck(this.parent).level : t$360);
      }
      if (!(effectiveLevel != null)) dart.assertFailed(null, I[2], 128, 12, "effectiveLevel != null");
      return effectiveLevel;
    }
    set level(value) {
      let t$360;
      if (!logger.hierarchicalLoggingEnabled && this.parent != null) {
        dart.throw(new core.UnsupportedError.new("Please set \"hierarchicalLoggingEnabled\" to true if you want to change the level on a non-root logger."));
      }
      if (this.parent == null && value == null) {
        dart.throw(new core.UnsupportedError.new("Cannot set the level to `null` on a logger with no parent."));
      }
      let isLevelChanged = !dart.equals(this[_level], value);
      this[_level] = value;
      if (isLevelChanged) {
        t$360 = this[_levelChangedController];
        t$360 == null ? null : t$360.add(value);
      }
    }
    get onLevelChanged() {
      this[_levelChangedController] == null ? this[_levelChangedController] = async.StreamController.broadcast(T.StreamControllerOfLevelN(), {sync: true}) : null;
      return dart.nullCheck(this[_levelChangedController]).stream;
    }
    get onRecord() {
      return this[_getStream]();
    }
    clearListeners() {
      let t$360;
      if (logger.hierarchicalLoggingEnabled || this.parent == null) {
        t$360 = this[_controller];
        t$360 == null ? null : t$360.close();
        this[_controller] = null;
      } else {
        logger.Logger.root.clearListeners();
      }
    }
    isLoggable(value) {
      return value['>='](this.level);
    }
    log(logLevel, message, error = null, stackTrace = null, zone = null) {
      let object = null;
      if (this.isLoggable(logLevel)) {
        if (T.Function()[_is](message)) {
          message = T.VoidToObjectN()[_as](message)();
        }
        let msg = null;
        if (typeof message == 'string') {
          msg = message;
        } else {
          msg = dart.toString(message);
          object = message;
        }
        if ((stackTrace == null || dart.equals(stackTrace, core.StackTrace.empty)) && logLevel['>='](logger.recordStackTraceAtLevel)) {
          stackTrace = core.StackTrace.current;
          error == null ? error = "autogenerated stack trace for " + dart.str(logLevel) + " " + dart.str(msg) : null;
        }
        zone == null ? zone = async.Zone.current : null;
        let record = new log_record.LogRecord.new(logLevel, msg, this.fullName, error, stackTrace, zone, object);
        if (this.parent == null) {
          this[_publish](record);
        } else if (!logger.hierarchicalLoggingEnabled) {
          logger.Logger.root[_publish](record);
        } else {
          let target = this;
          while (target != null) {
            target[_publish](record);
            target = target.parent;
          }
        }
      }
    }
    finest(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINEST, message, error, stackTrace);
    }
    finer(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINER, message, error, stackTrace);
    }
    fine(message, error = null, stackTrace = null) {
      return this.log(level.Level.FINE, message, error, stackTrace);
    }
    config(message, error = null, stackTrace = null) {
      return this.log(level.Level.CONFIG, message, error, stackTrace);
    }
    info(message, error = null, stackTrace = null) {
      return this.log(level.Level.INFO, message, error, stackTrace);
    }
    warning(message, error = null, stackTrace = null) {
      return this.log(level.Level.WARNING, message, error, stackTrace);
    }
    severe(message, error = null, stackTrace = null) {
      return this.log(level.Level.SEVERE, message, error, stackTrace);
    }
    shout(message, error = null, stackTrace = null) {
      return this.log(level.Level.SHOUT, message, error, stackTrace);
    }
    [_getStream]() {
      let t$360;
      if (logger.hierarchicalLoggingEnabled || this.parent == null) {
        return (t$360 = this[_controller], t$360 == null ? this[_controller] = async.StreamController.broadcast(T.StreamControllerOfLogRecord(), {sync: true}) : t$360).stream;
      } else {
        return logger.Logger.root[_getStream]();
      }
    }
    [_publish](record) {
      let t$360;
      t$360 = this[_controller];
      return t$360 == null ? null : t$360.add(record);
    }
    static get attachedLoggers() {
      return logger.Logger._loggers[$values];
    }
  };
  (logger.Logger._internal = function(name, parent$, children$) {
    this[_level] = null;
    this[_controller] = null;
    this[_levelChangedController] = null;
    this[name$] = name;
    this[parent] = parent$;
    this[_children] = children$;
    this[children] = new collection.UnmodifiableMapView.new(T.UnmodifiableMapViewOfString$Logger(), children$);
    if (this.parent == null) {
      this[_level] = logger.defaultLevel;
    } else {
      dart.nullCheck(this.parent)[_children][$_set](this.name, this);
    }
  }).prototype = logger.Logger.prototype;
  dart.lazyFn(logger.Logger['_#new#tearOff'], () => T.StringToLogger());
  dart.lazyFn(logger.Logger['_#detached#tearOff'], () => T.StringToLogger());
  dart.lazyFn(logger.Logger['_#_named#tearOff'], () => T.StringToLogger());
  dart.lazyFn(logger.Logger['_#_internal#tearOff'], () => T.StringAndLoggerNAndMapOfString$LoggerToLogger());
  dart.addRtiResources(logger.Logger, ["logging__src__logger|Logger"]);
  dart.setMethodSignature(logger.Logger, () => dart.global.Object.setPrototypeOf({
    clearListeners: _ti => T.VoidTovoid(),
    isLoggable: _ti => T.LevelTobool(),
    log: _ti => T.LevelAndObjectNAndObjectN__Tovoid(),
    finest: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    finer: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    fine: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    config: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    info: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    warning: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    severe: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    shout: _ti => T.ObjectNAndObjectNAndStackTraceNTovoid(),
    [_getStream]: _ti => T.VoidToStreamOfLogRecord(),
    [_publish]: _ti => T.LogRecordTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(logger.Logger))));
  dart.setMethodsImmediateTargetSignature(logger.Logger, () => dart.global.Object.setPrototypeOf({
    new: "package:logging/src/logger.dart:Logger",
    detached: "package:logging/src/logger.dart:Logger",
    _named: "package:logging/src/logger.dart:Logger",
    clearListeners: "package:logging/src/logger.dart:Logger",
    isLoggable: "package:logging/src/logger.dart:Logger",
    log: "package:logging/src/logger.dart:Logger",
    finest: "package:logging/src/logger.dart:Logger",
    finer: "package:logging/src/logger.dart:Logger",
    fine: "package:logging/src/logger.dart:Logger",
    config: "package:logging/src/logger.dart:Logger",
    info: "package:logging/src/logger.dart:Logger",
    warning: "package:logging/src/logger.dart:Logger",
    severe: "package:logging/src/logger.dart:Logger",
    shout: "package:logging/src/logger.dart:Logger",
    [_getStream]: "package:logging/src/logger.dart:Logger",
    [_publish]: "package:logging/src/logger.dart:Logger"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(logger.Logger))));
  dart.setStaticMethodSignature(logger.Logger, () => ['new', 'detached', '_named']);
  dart.setGetterSignature(logger.Logger, () => dart.global.Object.setPrototypeOf({
    fullName: _ti => T.String(),
    level: _ti => T.Level(),
    onLevelChanged: _ti => T.StreamOfLevelN(),
    onRecord: _ti => T.StreamOfLogRecord()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(logger.Logger))));
  dart.setSetterSignature(logger.Logger, () => dart.global.Object.setPrototypeOf({
    level: _ti => T.LevelN()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(logger.Logger))));
  dart.setStaticGetterSignature(logger.Logger, () => ['attachedLoggers']);
  dart.setLibraryUri(logger.Logger, I[3]);
  dart.setFieldSignature(logger.Logger, () => dart.global.Object.setPrototypeOf({
    name: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    parent: {
      type: _ti => T.LoggerN(),
      isConst: false,
      isFinal: true,
      libraryUri: I[3]
    },
    [_level]: {
      type: _ti => T.LevelN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[0]
    },
    [_children]: {
      type: _ti => T.MapOfString$Logger(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    children: {
      type: _ti => T.MapOfString$Logger(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    [_controller]: {
      type: _ti => T.StreamControllerNOfLogRecord(),
      isConst: false,
      isFinal: false,
      libraryUri: I[4]
    },
    [_levelChangedController]: {
      type: _ti => T.StreamControllerNOfLevelN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(logger.Logger))));
  dart.setStaticFieldSignature(logger.Logger, () => ['root', '_loggers']);
  dart.defineLazy(logger.Logger, {
    /*logger.Logger.root*/get root() {
      return logger.Logger.new("");
    },
    /*logger.Logger._loggers*/get _loggers() {
      return new _js_helper.IdentityMap.new(T.IdentityMapOfString$Logger());
    }
  });
  dart.defineLazy(logger, {
    /*logger.hierarchicalLoggingEnabled*/get hierarchicalLoggingEnabled() {
      return false;
    },
    set hierarchicalLoggingEnabled(value) {},
    /*logger.recordStackTraceAtLevel*/get recordStackTraceAtLevel() {
      return level.Level.OFF;
    },
    set recordStackTraceAtLevel(value) {},
    /*logger.defaultLevel*/get defaultLevel() {
      return C[6] || CT.C6;
    }
  });
  (function() {
  }).prototype = logger;
  var level$ = dart.privateName(log_record, "LogRecord.level");
  var message = dart.privateName(log_record, "LogRecord.message");
  var object = dart.privateName(log_record, "LogRecord.object");
  var loggerName = dart.privateName(log_record, "LogRecord.loggerName");
  var time = dart.privateName(log_record, "LogRecord.time");
  var sequenceNumber = dart.privateName(log_record, "LogRecord.sequenceNumber");
  var error = dart.privateName(log_record, "LogRecord.error");
  var stackTrace = dart.privateName(log_record, "LogRecord.stackTrace");
  var zone = dart.privateName(log_record, "LogRecord.zone");
  log_record.LogRecord = class LogRecord extends core.Object {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get message() {
      return this[message];
    }
    set message(value) {
      super.message = value;
    }
    get object() {
      return this[object];
    }
    set object(value) {
      super.object = value;
    }
    get loggerName() {
      return this[loggerName];
    }
    set loggerName(value) {
      super.loggerName = value;
    }
    get time() {
      return this[time];
    }
    set time(value) {
      super.time = value;
    }
    get sequenceNumber() {
      return this[sequenceNumber];
    }
    set sequenceNumber(value) {
      super.sequenceNumber = value;
    }
    get error() {
      return this[error];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
    get zone() {
      return this[zone];
    }
    set zone(value) {
      super.zone = value;
    }
    static ['_#new#tearOff'](level, message, loggerName, error = null, stackTrace = null, zone = null, object = null) {
      return new log_record.LogRecord.new(level, message, loggerName, error, stackTrace, zone, object);
    }
    toString() {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    }
  };
  (log_record.LogRecord.new = function(level, message$, loggerName$, error$ = null, stackTrace$ = null, zone$ = null, object$ = null) {
    let t$360;
    this[level$] = level;
    this[message] = message$;
    this[loggerName] = loggerName$;
    this[error] = error$;
    this[stackTrace] = stackTrace$;
    this[zone] = zone$;
    this[object] = object$;
    this[time] = new core.DateTime.now();
    this[sequenceNumber] = (t$360 = log_record.LogRecord._nextNumber, log_record.LogRecord._nextNumber = dart.notNull(t$360) + 1, t$360);
    ;
  }).prototype = log_record.LogRecord.prototype;
  dart.lazyFn(log_record.LogRecord['_#new#tearOff'], () => T.LevelAndStringAndString__ToLogRecord());
  dart.addRtiResources(log_record.LogRecord, ["logging__src__log_record|LogRecord"]);
  dart.setMethodsImmediateTargetSignature(log_record.LogRecord, () => dart.global.Object.setPrototypeOf({toString: "package:logging/src/log_record.dart:LogRecord"}, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(log_record.LogRecord))));
  dart.setLibraryUri(log_record.LogRecord, I[5]);
  dart.setFieldSignature(log_record.LogRecord, () => dart.global.Object.setPrototypeOf({
    level: {
      type: _ti => T.Level(),
      isConst: false,
      isFinal: true,
      libraryUri: I[0]
    },
    message: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    object: {
      type: _ti => T.ObjectN(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    loggerName: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    time: {
      type: _ti => T.DateTime(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    sequenceNumber: {
      type: _ti => T.int(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    error: {
      type: _ti => T.ObjectN(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    stackTrace: {
      type: _ti => T.StackTraceN(),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    zone: {
      type: _ti => T.ZoneN(),
      isConst: false,
      isFinal: true,
      libraryUri: I[4]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(log_record.LogRecord))));
  dart.setStaticFieldSignature(log_record.LogRecord, () => ['_nextNumber']);
  dart.defineExtensionMethods(log_record.LogRecord, ['toString']);
  dart.defineLazy(log_record.LogRecord, {
    /*log_record.LogRecord._nextNumber*/get _nextNumber() {
      return 0;
    },
    set _nextNumber(value) {}
  });
  (function() {
  }).prototype = log_record;
  dart.moduleConstCaches.set("packages/logging/logging", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"logging__src__level|Level":{"Comparable.T":"logging__src__level|Level","core|Comparable":["logging__src__level|Level"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"collection|UnmodifiableMapView":{"UnmodifiableMapView.K":"1","UnmodifiableMapView.V":"2","MapView.K":"1","MapView.V":"2","collection|MapView":["1","2"],"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2","collection|_UnmodifiableMapMixin":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapView":{"MapView.K":"1","MapView.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|_UnmodifiableMapMixin":{"_UnmodifiableMapMixin.K":"1","_UnmodifiableMapMixin.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"},"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"async|StreamController":{"StreamController.T":"1","StreamSink.S":"1","async|StreamSink":["1"],"EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|StreamSink":{"StreamSink.S":"1","EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|EventSink":{"EventSink.T":"1","Sink.T":"1","core|Sink":["1"]},"async|StreamConsumer":{"StreamConsumer.S":"1"},"core|Sink":{"Sink.T":"1"},"async|Stream":{"Stream.T":"1"},"core|DateTime":{"Comparable.T":"core|DateTime","core|Comparable":["core|DateTime"]}}'));
  dart.trackLibraries("packages/logging/logging", {
    "package:logging/src/level.dart": level,
    "package:logging/logging.dart": logging,
    "package:logging/src/logger.dart": logger,
    "package:logging/src/log_record.dart": log_record
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/level.dart","src/logger.dart","src/log_record.dart"],"names":[],"mappings":"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","file":"logging.ddc.js"}');
  // Exports:
  return {
    logging__src__level: level,
    logging__logging: logging,
    logging__src__logger: logger,
    logging__src__log_record: log_record
  };
}));

//# sourceMappingURL=logging.ddc.js.map
