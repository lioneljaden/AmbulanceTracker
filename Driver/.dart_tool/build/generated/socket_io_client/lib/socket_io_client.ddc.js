// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.9.2 (stable) (Wed Aug 27 03:49:40 2025 -0700) on "windows_x64"
// Module: packages/socket_io_client/socket_io_client
// Flags: enableAsserts(true)
define(['dart_sdk', 'packages/socket_io_common/socket_io_common', 'packages/logging/logging', 'packages/web/web'], (function load__packages__socket_io_client__socket_io_client(dart_sdk, packages__socket_io_common__socket_io_common, packages__logging__logging, packages__web__web) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const js_util = dart_sdk.js_util;
  const js_interop = dart_sdk.js_interop;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const parser = packages__socket_io_common__socket_io_common.socket_io_common__src__engine__parser__parser;
  const event_emitter = packages__socket_io_common__socket_io_common.socket_io_common__src__util__event_emitter;
  const parser$ = packages__socket_io_common__socket_io_common.socket_io_common__src__parser__parser;
  const logger = packages__logging__logging.logging__src__logger;
  const events = packages__web__web.web__src__helpers__events__events;
  var socket_io_client = Object.create(dart.library);
  var http_client_adapter = Object.create(dart.library);
  var darty = Object.create(dart.library);
  var socket = Object.create(dart.library);
  var on = Object.create(dart.library);
  var manager = Object.create(dart.library);
  var http_client_adapter_factory = Object.create(dart.library);
  var html_http_client_adapter = Object.create(dart.library);
  var socket$ = Object.create(dart.library);
  var transports = Object.create(dart.library);
  var websocket_transport = Object.create(dart.library);
  var transport = Object.create(dart.library);
  var polling_transport = Object.create(dart.library);
  var parseqs = Object.create(dart.library);
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $isEmpty = dartx.isEmpty;
  var $remove = dartx.remove;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $toInt = dartx.toInt;
  var $last = dartx.last;
  var $removeLast = dartx.removeLast;
  var $first = dartx.first;
  var $removeAt = dartx.removeAt;
  var $length = dartx.length;
  var $sublist = dartx.sublist;
  var $insert = dartx.insert;
  var $clear = dartx.clear;
  var $contains = dartx.contains;
  var $keys = dartx.keys;
  var $floor = dartx.floor;
  var $replaceFirst = dartx.replaceFirst;
  var $removeRange = dartx.removeRange;
  var $lengthInBytes = dartx.lengthInBytes;
  var $ceil = dartx.ceil;
  var $codeUnitAt = dartx.codeUnitAt;
  var $where = dartx.where;
  var $toList = dartx.toList;
  var $toRadixString = dartx.toRadixString;
  var $forEach = dartx.forEach;
  var T = {
    dynamicAnddynamicToSocket: () => (T.dynamicAnddynamicToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(@[@])", true)))(),
    LinkedMap: () => (T.LinkedMap = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|LinkedMap<@,@>", true)))(),
    MapN: () => (T.MapN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<@,@>?", true)))(),
    Manager: () => (T.Manager = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|Manager", true)))(),
    Map: () => (T.Map = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<@,@>", true)))(),
    dynamicAnddynamicToSocket$1: () => (T.dynamicAnddynamicToSocket$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(@,@)", true)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,@>", true)))(),
    __ToParserOptions: () => (T.__ToParserOptions = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|ParserOptions({decoder!socket_io_common__src__parser__parser|Decoder(),encoder!socket_io_common__src__parser__parser|Encoder()})", true)))(),
    VoidToEncoder: () => (T.VoidToEncoder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Encoder()", true)))(),
    VoidToDecoder: () => (T.VoidToDecoder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Decoder()", true)))(),
    VoidToOptionBuilder: () => (T.VoidToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder()", true)))(),
    MapToOptionBuilder: () => (T.MapToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|Map<@,@>)", true)))(),
    StringToOptionBuilder: () => (T.StringToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|String)", true)))(),
    ListOfStringToOptionBuilder: () => (T.ListOfStringToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|List<core|String>)", true)))(),
    boolToOptionBuilder: () => (T.boolToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|bool)", true)))(),
    MapOfString$dynamicToOptionBuilder: () => (T.MapOfString$dynamicToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|Map<core|String,@>)", true)))(),
    ParserOptionsToOptionBuilder: () => (T.ParserOptionsToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(socket_io_client__src__darty|ParserOptions)", true)))(),
    numToOptionBuilder: () => (T.numToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|num)", true)))(),
    intToOptionBuilder: () => (T.intToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(core|int)", true)))(),
    FnToOptionBuilder: () => (T.FnToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(~(~(core|Map<@,@>)))", true)))(),
    HttpClientAdapterToOptionBuilder: () => (T.HttpClientAdapterToOptionBuilder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__darty|OptionBuilder(socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter)", true)))(),
    VoidToMapOfString$dynamic: () => (T.VoidToMapOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<core|String,@>()", true)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<core|String,@>", true)))(),
    SocketAndFnToFn: () => (T.SocketAndFnToFn = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@()(socket_io_client__src__socket|Socket,@(@))", true)))(),
    FnToFn: () => (T.FnToFn = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@()(@(@))", true)))(),
    SocketToFn: () => (T.SocketToFn = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@()(@(@))(socket_io_client__src__socket|Socket)", true)))(),
    ByteBuffer: () => (T.ByteBuffer = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "typed_data|ByteBuffer", true)))(),
    ListOfint: () => (T.ListOfint = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<core|int>", true)))(),
    Iterable: () => (T.Iterable = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Iterable<@>", true)))(),
    IdentityMapOfString$bool: () => (T.IdentityMapOfString$bool = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,core|bool>", true)))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,core|Object>", true)))(),
    Completer: () => (T.Completer = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Completer<@>", true)))(),
    dynamic: () => (T.dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@", true)))(),
    dynamicAnddynamicToNull: () => (T.dynamicAnddynamicToNull = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null(@[@])", true)))(),
    Function: () => (T.Function = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Function", true)))(),
    FunctionN: () => (T.FunctionN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Function?", true)))(),
    LinkedHashMap: () => (T.LinkedHashMap = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "collection|LinkedHashMap<@,@>", true)))(),
    int: () => (T.int = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int", true)))(),
    dynamicAnddynamicTovoid: () => (T.dynamicAnddynamicTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(@,@)", true)))(),
    List: () => (T.List = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<@>", true)))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~()", true)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null(@)", true)))(),
    ListN: () => (T.ListN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<@>?", true)))(),
    String: () => (T.String = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String", true)))(),
    ManagerAndStringAndMapNToSocket: () => (T.ManagerAndStringAndMapNToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(socket_io_client__src__manager|Manager,core|String,core|Map<@,@>?)", true)))(),
    bool: () => (T.bool = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool", true)))(),
    VoidToSocket: () => (T.VoidToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket()", true)))(),
    ListToSocket: () => (T.ListToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(core|List<@>)", true)))(),
    StringAnddynamic__Tovoid: () => (T.StringAnddynamic__Tovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|String,@{ack:core|Function?,binary:core|bool})", true)))(),
    StringAnddynamic__ToFuture: () => (T.StringAnddynamic__ToFuture = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Future<@>(core|String,@{ack:core|Function?,binary:core|bool})", true)))(),
    ListTovoid: () => (T.ListTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|List<@>)", true)))(),
    boolTovoid: () => (T.boolTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~([core|bool])", true)))(),
    intAndFunctionTovoid: () => (T.intAndFunctionTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|int,core|Function)", true)))(),
    MapTovoid: () => (T.MapTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|Map<@,@>)", true)))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~([@])", true)))(),
    MapNTovoid: () => (T.MapNTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|Map<@,@>?)", true)))(),
    dynamicTovoid$1: () => (T.dynamicTovoid$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(@)", true)))(),
    dynamicToFunction: () => (T.dynamicToFunction = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Function(@)", true)))(),
    dynamicToSocket: () => (T.dynamicToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(@)", true)))(),
    Socket: () => (T.Socket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket", true)))(),
    intToSocket: () => (T.intToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(core|int)", true)))(),
    FnToSocket: () => (T.FnToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(@(core|String,@))", true)))(),
    FnToSocket$1: () => (T.FnToSocket$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket([@(core|String,@)?])", true)))(),
    VoidToList: () => (T.VoidToList = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<@>()", true)))(),
    StringN: () => (T.StringN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String?", true)))(),
    num: () => (T.num = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|num", true)))(),
    FunctionToDestroyable: () => (T.FunctionToDestroyable = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__on|Destroyable(core|Function)", true)))(),
    EventEmitterAndStringAndFnToDestroyable: () => (T.EventEmitterAndStringAndFnToDestroyable = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__on|Destroyable(socket_io_common__src__util__event_emitter|EventEmitter,core|String,@(@))", true)))(),
    IdentityMapOfString$Socket: () => (T.IdentityMapOfString$Socket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,socket_io_client__src__socket|Socket>", true)))(),
    Encoder: () => (T.Encoder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Encoder", true)))(),
    Decoder: () => (T.Decoder = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Decoder", true)))(),
    Object: () => (T.Object = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Object", true)))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Future<core|Null>", true)))(),
    Null: () => (T.Null = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null", true)))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null()", true)))(),
    dynamicToNull$1: () => (T.dynamicToNull$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null([@])", true)))(),
    __ToManager: () => (T.__ToManager = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|Manager({options:core|Map<@,@>?,uri:@})", true)))(),
    numN: () => (T.numN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|num?", true)))(),
    __ToManager$1: () => (T.__ToManager$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|Manager({callback:@,opts:core|Map<@,@>?})", true)))(),
    StringAndMapToSocket: () => (T.StringAndMapToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__socket|Socket(core|String,core|Map<@,@>)", true)))(),
    VoidToManager: () => (T.VoidToManager = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|Manager()", true)))(),
    MapOfString$Socket: () => (T.MapOfString$Socket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<core|String,socket_io_client__src__socket|Socket>", true)))(),
    HttpClientAdapter: () => (T.HttpClientAdapter = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter", true)))(),
    boolN: () => (T.boolN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool?", true)))(),
    _BackoffN: () => (T._BackoffN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|_Backoff?", true)))(),
    SocketN: () => (T.SocketN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__socket|Socket?", true)))(),
    EncoderN: () => (T.EncoderN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Encoder?", true)))(),
    DecoderN: () => (T.DecoderN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_common__src__parser__parser|Decoder?", true)))(),
    __To_Backoff: () => (T.__To_Backoff = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__manager|_Backoff({factor:@,jitter:@,max:@,min:@})", true)))(),
    VoidToHttpClientAdapter: () => (T.VoidToHttpClientAdapter = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter()", true)))(),
    FutureOfJSObject: () => (T.FutureOfJSObject = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Future<_interceptors|JSObject>", true)))(),
    JSObject: () => (T.JSObject = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSObject", true)))(),
    JSObject$1: () => (T.JSObject$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSObject", true)))(),
    VoidToHtmlHttpClientAdapter: () => (T.VoidToHtmlHttpClientAdapter = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__html_http_client_adapter|HtmlHttpClientAdapter()", true)))(),
    String__ToFutureOfJSObject: () => (T.String__ToFutureOfJSObject = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Future<_interceptors|JSObject>(core|String{headers:core|Map<core|String,@>?})", true)))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSArray<core|String>", true)))(),
    ListOfString: () => (T.ListOfString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<core|String>", true)))(),
    IdentityMapOfString$int: () => (T.IdentityMapOfString$int = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,core|int>", true)))(),
    LinkedHashMapOfString$dynamic: () => (T.LinkedHashMapOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "collection|LinkedHashMap<core|String,@>", true)))(),
    TransportN: () => (T.TransportN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport|Transport?", true)))(),
    IdentityMapOfString$String: () => (T.IdentityMapOfString$String = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_js_helper|IdentityMap<core|String,core|String>", true)))(),
    JSArrayOfMapOfString$dynamic: () => (T.JSArrayOfMapOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSArray<core|Map<core|String,@>>", true)))(),
    dynamicToNdynamic: () => (T.dynamicToNdynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@(@)?", true)))(),
    StringTobool: () => (T.StringTobool = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool(core|String)", true)))(),
    StringAndMapNToSocket: () => (T.StringAndMapNToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__socket|Socket(core|String,core|Map<@,@>?)", true)))(),
    dynamicAnddynamicToTransport: () => (T.dynamicAnddynamicToTransport = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport|Transport(@[@])", true)))(),
    dynamicToint: () => (T.dynamicToint = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int(@)", true)))(),
    StringToint: () => (T.StringToint = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int(core|String)", true)))(),
    dynamicAnddynamicAndFnToSocket: () => (T.dynamicAnddynamicAndFnToSocket = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__socket|Socket(@,@[@(@)?])", true)))(),
    __Tovoid: () => (T.__Tovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~({callback:@(@)?,data:@,options:@,type:@})", true)))(),
    VoidToSocket$1: () => (T.VoidToSocket$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__socket|Socket()", true)))(),
    dynamicAnddynamicTovoid$1: () => (T.dynamicAnddynamicTovoid$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(@[@])", true)))(),
    ListToList: () => (T.ListToList = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<@>(core|List<@>)", true)))(),
    intN: () => (T.intN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|int?", true)))(),
    TimerN: () => (T.TimerN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|Timer?", true)))(),
    ListNOfString: () => (T.ListNOfString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<core|String>?", true)))(),
    StringToListOfString: () => (T.StringToListOfString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|List<core|String>(core|String)", true)))(),
    StringAnddynamicToTransport: () => (T.StringAnddynamicToTransport = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport|Transport(core|String,@)", true)))(),
    VoidToTransports: () => (T.VoidToTransports = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__transports|Transports()", true)))(),
    JSObjectTovoid: () => (T.JSObjectTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(_interceptors|JSObject)", true)))(),
    JSObjectTovoid$1: () => (T.JSObjectTovoid$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(_interceptors|JSObject)", true)))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Object?", true)))(),
    JSObjectTovoid$2: () => (T.JSObjectTovoid$2 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(_interceptors|JSObject)", true)))(),
    MapToWebSocketTransport: () => (T.MapToWebSocketTransport = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__websocket_transport|WebSocketTransport(core|Map<@,@>)", true)))(),
    MapNOfString$dynamic: () => (T.MapNOfString$dynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<core|String,@>?", true)))(),
    StringAnddynamicTovoid: () => (T.StringAnddynamicTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(core|String,@)", true)))(),
    dynamicAnddynamicTodynamic: () => (T.dynamicAnddynamicTodynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@(@[@])", true)))(),
    VoidTodynamic: () => (T.VoidTodynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@()", true)))(),
    FnTovoid: () => (T.FnTovoid = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "~(@())", true)))(),
    StringAndMapOfString$dynamicToString: () => (T.StringAndMapOfString$dynamicToString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String(core|String,core|Map<core|String,@>)", true)))(),
    VoidToString: () => (T.VoidToString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String()", true)))(),
    MapOfString$dynamicToString: () => (T.MapOfString$dynamicToString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String(core|Map<core|String,@>)", true)))(),
    Logger: () => (T.Logger = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "logging__src__logger|Logger", true)))(),
    JSObjectN: () => (T.JSObjectN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSObject?", true)))(),
    JSObject$2: () => (T.JSObject$2 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSObject", true)))(),
    JSObject$3: () => (T.JSObject$3 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "_interceptors|JSObject", true)))(),
    dynamicAnddynamicAnddynamicToboolN: () => (T.dynamicAnddynamicAnddynamicToboolN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool?(@[@,@])", true)))(),
    dynamicTodynamic: () => (T.dynamicTodynamic = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "@(@)", true)))(),
    MapToPollingTransport: () => (T.MapToPollingTransport = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__polling_transport|PollingTransport(core|Map<@,@>)", true)))(),
    MapNToRequest: () => (T.MapNToRequest = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__polling_transport|Request([core|Map<@,@>?])", true)))(),
    dynamicAnddynamicToNull$1: () => (T.dynamicAnddynamicToNull$1 = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Null(@,@)", true)))(),
    StringAndMapToRequest: () => (T.StringAndMapToRequest = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "socket_io_client__src__engine__transport__polling_transport|Request(core|String,core|Map<@,@>)", true)))(),
    StreamSubscriptionN: () => (T.StreamSubscriptionN = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "async|StreamSubscription<@>?", true)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|bool()", true)))(),
    MapToString: () => (T.MapToString = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|String(core|Map<@,@>)", true)))(),
    dynamicToMap: () => (T.dynamicToMap = dart.constFn(dart_rti._Universe.eval(dart.typeUniverse, "core|Map<@,@>(@)", true)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constMap(T.String(), T.int(), ["connect", 1, "connect_error", 1, "disconnect", 1, "disconnecting", 1, "newListener", 1, "removeListener", 1]);
    }
  });
  var C = [void 0];
  var I = [
    "package:socket_io_client/src/engine/transport/http_client_adapter.dart",
    "package:socket_io_client/src/darty.dart",
    "dart:core",
    "package:socket_io_client/src/socket.dart",
    "package:socket_io_client/src/manager.dart",
    "package:socket_io_client/src/on.dart",
    "package:socket_io_client/src/engine/socket.dart",
    "package:socket_io_common/src/parser/parser.dart",
    "package:socket_io_client/src/engine/transport/html_http_client_adapter.dart",
    "package:socket_io_client/src/engine/transport.dart",
    "dart:async",
    "package:socket_io_client/src/engine/transport/transports.dart",
    "package:logging/src/logger.dart",
    "package:socket_io_client/src/engine/transport/websocket_transport.dart",
    "dart:_interceptors",
    "package:socket_io_client/src/engine/transport/polling_transport.dart"
  ];
  socket_io_client.io = function io(uri, opts = null) {
    return socket_io_client._lookup(uri, opts);
  };
  dart.lazyFn(socket_io_client.io, () => T.dynamicAnddynamicToSocket());
  var _as = dart.privateName(dart_rti, "_as");
  var _is = dart.privateName(dart_rti, "_is");
  socket_io_client._lookup = function _lookup(uri, opts) {
    let t$360, t$365, t$364, t$363, t$362;
    opts = (t$360 = opts, t$360 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$360);
    let parsed = core.Uri.parse(dart_rti._asString(uri));
    let id = parsed.scheme + "://" + parsed.host + ":" + dart.strSafe(parsed.port);
    let path = parsed.path;
    let sameNamespace = socket_io_client.cache[$containsKey](id) && dart.dtest(dart.dsend(dart.dload(socket_io_client.cache[$_get](id), 'nsps'), 'containsKey', [path]));
    let newConnection = dart.equals(dart.dsend(opts, '_get', ["forceNew"]), true) || dart.equals(dart.dsend(opts, '_get', ["force new connection"]), true) || false === dart.dsend(opts, '_get', ["multiplex"]) || sameNamespace;
    let io = null;
    function t$36$35io$35get() {
      let t$360;
      t$360 = io;
      return t$360 == null ? dart.throw(new _internal.LateError.localNI("io")) : t$360;
    }
    function t$36$35io$35set(io$35param) {
      return io = io$35param;
    }
    if (newConnection) {
      socket_io_client._logger.fine("ignoring socket cache for " + dart.str(uri));
      t$36$35io$35set(new manager.Manager.new({uri: uri, options: T.MapN()[_as](opts)}));
    } else {
      t$36$35io$35set(T.Manager()[_as]((t$362 = socket_io_client.cache, t$363 = id, t$364 = t$362[$_get](t$363), t$364 == null ? (t$365 = new manager.Manager.new({uri: uri, options: T.MapN()[_as](opts)}), t$362[$_set](t$363, t$365), t$365) : t$364)));
    }
    if (parsed.query[$isNotEmpty] && dart.dsend(opts, '_get', ["query"]) == null) {
      dart.dsend(opts, '_set', ["query", parsed.query]);
    } else if (opts != null && T.Map()[_is](dart.dsend(opts, '_get', ["query"]))) {
      dart.dsend(opts, '_set', ["query", parseqs.encode(T.Map()[_as](dart.dsend(opts, '_get', ["query"])))]);
    }
    return t$36$35io$35get().socket(parsed.path[$isEmpty] ? "/" : parsed.path, T.Map()[_as](opts));
  };
  dart.lazyFn(socket_io_client._lookup, () => T.dynamicAnddynamicToSocket$1());
  dart.defineLazy(socket_io_client, {
    /*socket_io_client.protocol*/get protocol() {
      return parser.protocol;
    },
    /*socket_io_client.cache*/get cache() {
      return new _js_helper.IdentityMap.new(T.IdentityMapOfString$dynamic());
    },
    /*socket_io_client._logger*/get _logger() {
      return logger.Logger.new("socket_io_client");
    }
  });
  (function() {
  }).prototype = socket_io_client;
  http_client_adapter.HttpClientAdapter = class HttpClientAdapter extends core.Object {};
  (http_client_adapter.HttpClientAdapter.new = function() {
    ;
  }).prototype = http_client_adapter.HttpClientAdapter.prototype;
  dart.addRtiResources(http_client_adapter.HttpClientAdapter, ["socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter"]);
  dart.setLibraryUri(http_client_adapter.HttpClientAdapter, I[0]);
  (function() {
  }).prototype = http_client_adapter;
  var encoder = dart.privateName(darty, "ParserOptions.encoder");
  var decoder = dart.privateName(darty, "ParserOptions.decoder");
  darty.ParserOptions = class ParserOptions extends core.Object {
    get encoder() {
      return this[encoder];
    }
    set encoder(value) {
      super.encoder = value;
    }
    get decoder() {
      return this[decoder];
    }
    set decoder(value) {
      super.decoder = value;
    }
    static ['_#new#tearOff'](opts) {
      let encoder = opts && 'encoder' in opts ? opts.encoder : null;
      let decoder = opts && 'decoder' in opts ? opts.decoder : null;
      return new darty.ParserOptions.new({encoder: encoder, decoder: decoder});
    }
  };
  (darty.ParserOptions.new = function(opts) {
    let encoder$ = opts && 'encoder' in opts ? opts.encoder : null;
    let decoder$ = opts && 'decoder' in opts ? opts.decoder : null;
    this[encoder] = encoder$;
    this[decoder] = decoder$;
    ;
  }).prototype = darty.ParserOptions.prototype;
  dart.lazyFn(darty.ParserOptions['_#new#tearOff'], () => T.__ToParserOptions());
  dart.addRtiResources(darty.ParserOptions, ["socket_io_client__src__darty|ParserOptions"]);
  dart.setLibraryUri(darty.ParserOptions, I[1]);
  dart.setFieldSignature(darty.ParserOptions, () => dart.global.Object.setPrototypeOf({
    encoder: {
      type: _ti => T.VoidToEncoder(),
      isConst: false,
      isFinal: true
    },
    decoder: {
      type: _ti => T.VoidToDecoder(),
      isConst: false,
      isFinal: true
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(darty.ParserOptions))));
  var _opts = dart.privateName(darty, "_opts");
  darty.OptionBuilder = class OptionBuilder extends core.Object {
    static ['_#new#tearOff']() {
      return new darty.OptionBuilder.new();
    }
    enableForceNew() {
      this[_opts][$_set]("forceNew", true);
      return this;
    }
    disableForceNew() {
      this[_opts][$remove]("forceNew");
      return this;
    }
    enableForceNewConnection() {
      this[_opts][$_set]("force new connection", true);
      return this;
    }
    disableForceNewConnection() {
      this[_opts][$remove]("force new connection");
      return this;
    }
    enableMultiplex() {
      this[_opts][$_set]("multiplex", true);
      return this;
    }
    disableMultiplex() {
      this[_opts][$remove]("multiplex");
      return this;
    }
    enableAddTrailingSlash() {
      this[_opts][$_set]("addTrailingSlash", true);
      return this;
    }
    disableAddTrailingSlash() {
      this[_opts][$remove]("addTrailingSlash");
      return this;
    }
    setQuery(query) {
      this[_opts][$_set]("query", query);
      return this;
    }
    setPath(path) {
      this[_opts][$_set]("path", path);
      return this;
    }
    setProtocols(protocols) {
      this[_opts][$_set]("protocols", protocols);
      return this;
    }
    setRememberUpgrade(rememberUpgrade) {
      this[_opts][$_set]("rememberUpgrade", rememberUpgrade);
      return this;
    }
    setTimestampParam(timestampParam) {
      this[_opts][$_set]("timestampParam", timestampParam);
      return this;
    }
    setTimestampRequests(timestampRequests) {
      this[_opts][$_set]("timestampRequests", timestampRequests);
      return this;
    }
    setTransportOptions(transportOptions) {
      this[_opts][$_set]("transportOptions", transportOptions);
      return this;
    }
    enableAutoConnect() {
      this[_opts][$remove]("autoConnect");
      return this;
    }
    disableAutoConnect() {
      this[_opts][$_set]("autoConnect", false);
      return this;
    }
    setParser(parserOptions) {
      this[_opts][$_set]("parser", parserOptions);
      return this;
    }
    setReconnectionAttempts(attempts) {
      this[_opts][$_set]("reconnectionAttempts", attempts);
      return this;
    }
    setReconnectionDelay(delay) {
      this[_opts][$_set]("reconnectionDelay", delay);
      return this;
    }
    setReconnectionDelayMax(delayMax) {
      this[_opts][$_set]("reconnectionDelayMax", delayMax);
      return this;
    }
    setRandomizationFactor(factor) {
      this[_opts][$_set]("randomizationFactor", factor);
      return this;
    }
    setTimeout(timeout) {
      this[_opts][$_set]("timeout", timeout);
      return this;
    }
    enableReconnection() {
      this[_opts][$remove]("reconnection");
      return this;
    }
    disableReconnection() {
      this[_opts][$_set]("reconnection", false);
      return this;
    }
    setTransports(transports) {
      this[_opts][$_set]("transports", transports);
      return this;
    }
    setUpgrade(upgrade) {
      this[_opts][$_set]("upgrade", upgrade);
      return this;
    }
    setExtraHeaders(headers) {
      this[_opts][$_set]("extraHeaders", headers);
      return this;
    }
    setForceBase64(forceBase64) {
      this[_opts][$_set]("forceBase64", forceBase64);
      return this;
    }
    setAckTimeout(timeout) {
      this[_opts][$_set]("ackTimeout", timeout);
      return this;
    }
    setAuth(auth) {
      this[_opts][$_set]("auth", auth);
      return this;
    }
    setAuthFn(authFn) {
      this[_opts][$_set]("auth", authFn);
      return this;
    }
    setRetries(retries) {
      this[_opts][$_set]("retries", retries);
      return this;
    }
    setHttpClientAdapter(httpClientAdapter) {
      this[_opts][$_set]("httpClientAdapter", httpClientAdapter);
      return this;
    }
    build() {
      return this[_opts];
    }
  };
  (darty.OptionBuilder.new = function() {
    this[_opts] = new _js_helper.IdentityMap.new(T.IdentityMapOfString$dynamic());
    ;
  }).prototype = darty.OptionBuilder.prototype;
  dart.lazyFn(darty.OptionBuilder['_#new#tearOff'], () => T.VoidToOptionBuilder());
  dart.addRtiResources(darty.OptionBuilder, ["socket_io_client__src__darty|OptionBuilder"]);
  dart.setMethodSignature(darty.OptionBuilder, () => dart.global.Object.setPrototypeOf({
    enableForceNew: _ti => T.VoidToOptionBuilder(),
    disableForceNew: _ti => T.VoidToOptionBuilder(),
    enableForceNewConnection: _ti => T.VoidToOptionBuilder(),
    disableForceNewConnection: _ti => T.VoidToOptionBuilder(),
    enableMultiplex: _ti => T.VoidToOptionBuilder(),
    disableMultiplex: _ti => T.VoidToOptionBuilder(),
    enableAddTrailingSlash: _ti => T.VoidToOptionBuilder(),
    disableAddTrailingSlash: _ti => T.VoidToOptionBuilder(),
    setQuery: _ti => T.MapToOptionBuilder(),
    setPath: _ti => T.StringToOptionBuilder(),
    setProtocols: _ti => T.ListOfStringToOptionBuilder(),
    setRememberUpgrade: _ti => T.boolToOptionBuilder(),
    setTimestampParam: _ti => T.StringToOptionBuilder(),
    setTimestampRequests: _ti => T.boolToOptionBuilder(),
    setTransportOptions: _ti => T.MapOfString$dynamicToOptionBuilder(),
    enableAutoConnect: _ti => T.VoidToOptionBuilder(),
    disableAutoConnect: _ti => T.VoidToOptionBuilder(),
    setParser: _ti => T.ParserOptionsToOptionBuilder(),
    setReconnectionAttempts: _ti => T.numToOptionBuilder(),
    setReconnectionDelay: _ti => T.intToOptionBuilder(),
    setReconnectionDelayMax: _ti => T.intToOptionBuilder(),
    setRandomizationFactor: _ti => T.numToOptionBuilder(),
    setTimeout: _ti => T.intToOptionBuilder(),
    enableReconnection: _ti => T.VoidToOptionBuilder(),
    disableReconnection: _ti => T.VoidToOptionBuilder(),
    setTransports: _ti => T.ListOfStringToOptionBuilder(),
    setUpgrade: _ti => T.boolToOptionBuilder(),
    setExtraHeaders: _ti => T.MapOfString$dynamicToOptionBuilder(),
    setForceBase64: _ti => T.boolToOptionBuilder(),
    setAckTimeout: _ti => T.intToOptionBuilder(),
    setAuth: _ti => T.MapToOptionBuilder(),
    setAuthFn: _ti => T.FnToOptionBuilder(),
    setRetries: _ti => T.intToOptionBuilder(),
    setHttpClientAdapter: _ti => T.HttpClientAdapterToOptionBuilder(),
    build: _ti => T.VoidToMapOfString$dynamic()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(darty.OptionBuilder))));
  dart.setMethodsImmediateTargetSignature(darty.OptionBuilder, () => dart.global.Object.setPrototypeOf({
    enableForceNew: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableForceNew: "package:socket_io_client/src/darty.dart:OptionBuilder",
    enableForceNewConnection: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableForceNewConnection: "package:socket_io_client/src/darty.dart:OptionBuilder",
    enableMultiplex: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableMultiplex: "package:socket_io_client/src/darty.dart:OptionBuilder",
    enableAddTrailingSlash: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableAddTrailingSlash: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setQuery: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setPath: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setProtocols: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setRememberUpgrade: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setTimestampParam: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setTimestampRequests: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setTransportOptions: "package:socket_io_client/src/darty.dart:OptionBuilder",
    enableAutoConnect: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableAutoConnect: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setParser: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setReconnectionAttempts: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setReconnectionDelay: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setReconnectionDelayMax: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setRandomizationFactor: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setTimeout: "package:socket_io_client/src/darty.dart:OptionBuilder",
    enableReconnection: "package:socket_io_client/src/darty.dart:OptionBuilder",
    disableReconnection: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setTransports: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setUpgrade: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setExtraHeaders: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setForceBase64: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setAckTimeout: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setAuth: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setAuthFn: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setRetries: "package:socket_io_client/src/darty.dart:OptionBuilder",
    setHttpClientAdapter: "package:socket_io_client/src/darty.dart:OptionBuilder",
    build: "package:socket_io_client/src/darty.dart:OptionBuilder"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(darty.OptionBuilder))));
  dart.setLibraryUri(darty.OptionBuilder, I[1]);
  dart.setFieldSignature(darty.OptionBuilder, () => dart.global.Object.setPrototypeOf({[_opts]: {
      type: _ti => T.MapOfString$dynamic(),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(darty.OptionBuilder))));
  darty['DartySocket|onConnect'] = function DartySocket$124onConnect($this, handler) {
    return $this.on("connect", handler);
  };
  dart.lazyFn(darty['DartySocket|onConnect'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onConnect'] = function DartySocket$124get$35onConnect($this) {
    return dart.fn(handler => darty['DartySocket|onConnect']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onConnect'], () => T.SocketToFn());
  darty['DartySocket|onConnectError'] = function DartySocket$124onConnectError($this, handler) {
    return $this.on("connect_error", handler);
  };
  dart.lazyFn(darty['DartySocket|onConnectError'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onConnectError'] = function DartySocket$124get$35onConnectError($this) {
    return dart.fn(handler => darty['DartySocket|onConnectError']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onConnectError'], () => T.SocketToFn());
  darty['DartySocket|onDisconnect'] = function DartySocket$124onDisconnect($this, handler) {
    return $this.on("disconnect", handler);
  };
  dart.lazyFn(darty['DartySocket|onDisconnect'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onDisconnect'] = function DartySocket$124get$35onDisconnect($this) {
    return dart.fn(handler => darty['DartySocket|onDisconnect']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onDisconnect'], () => T.SocketToFn());
  darty['DartySocket|onError'] = function DartySocket$124onError($this, handler) {
    return $this.io.on("error", handler);
  };
  dart.lazyFn(darty['DartySocket|onError'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onError'] = function DartySocket$124get$35onError($this) {
    return dart.fn(handler => darty['DartySocket|onError']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onError'], () => T.SocketToFn());
  darty['DartySocket|onReconnect'] = function DartySocket$124onReconnect($this, handler) {
    return $this.io.on("reconnect", handler);
  };
  dart.lazyFn(darty['DartySocket|onReconnect'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onReconnect'] = function DartySocket$124get$35onReconnect($this) {
    return dart.fn(handler => darty['DartySocket|onReconnect']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onReconnect'], () => T.SocketToFn());
  darty['DartySocket|onReconnectAttempt'] = function DartySocket$124onReconnectAttempt($this, handler) {
    return $this.io.on("reconnect_attempt", handler);
  };
  dart.lazyFn(darty['DartySocket|onReconnectAttempt'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onReconnectAttempt'] = function DartySocket$124get$35onReconnectAttempt($this) {
    return dart.fn(handler => darty['DartySocket|onReconnectAttempt']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onReconnectAttempt'], () => T.SocketToFn());
  darty['DartySocket|onReconnectFailed'] = function DartySocket$124onReconnectFailed($this, handler) {
    return $this.io.on("reconnect_failed", handler);
  };
  dart.lazyFn(darty['DartySocket|onReconnectFailed'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onReconnectFailed'] = function DartySocket$124get$35onReconnectFailed($this) {
    return dart.fn(handler => darty['DartySocket|onReconnectFailed']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onReconnectFailed'], () => T.SocketToFn());
  darty['DartySocket|onReconnectError'] = function DartySocket$124onReconnectError($this, handler) {
    return $this.io.on("reconnect_error", handler);
  };
  dart.lazyFn(darty['DartySocket|onReconnectError'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onReconnectError'] = function DartySocket$124get$35onReconnectError($this) {
    return dart.fn(handler => darty['DartySocket|onReconnectError']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onReconnectError'], () => T.SocketToFn());
  darty['DartySocket|onPing'] = function DartySocket$124onPing($this, handler) {
    return $this.io.on("ping", handler);
  };
  dart.lazyFn(darty['DartySocket|onPing'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onPing'] = function DartySocket$124get$35onPing($this) {
    return dart.fn(handler => darty['DartySocket|onPing']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onPing'], () => T.SocketToFn());
  darty['DartySocket|onPong'] = function DartySocket$124onPong($this, handler) {
    return $this.on("pong", handler);
  };
  dart.lazyFn(darty['DartySocket|onPong'], () => T.SocketAndFnToFn());
  darty['DartySocket|get#onPong'] = function DartySocket$124get$35onPong($this) {
    return dart.fn(handler => darty['DartySocket|onPong']($this, handler), T.FnToFn());
  };
  dart.lazyFn(darty['DartySocket|get#onPong'], () => T.SocketToFn());
  (function() {
  }).prototype = darty;
  var io$ = dart.privateName(socket, "Socket.io");
  var id = dart.privateName(socket, "Socket.id");
  var connected = dart.privateName(socket, "Socket.connected");
  var recovered = dart.privateName(socket, "Socket.recovered");
  var auth = dart.privateName(socket, "Socket.auth");
  var receiveBuffer = dart.privateName(socket, "Socket.receiveBuffer");
  var sendBuffer = dart.privateName(socket, "Socket.sendBuffer");
  var nsp = dart.privateName(socket, "Socket.nsp");
  var ids = dart.privateName(socket, "Socket.ids");
  var acks = dart.privateName(socket, "Socket.acks");
  var subs = dart.privateName(socket, "Socket.subs");
  var flags = dart.privateName(socket, "Socket.flags");
  var query = dart.privateName(socket, "Socket.query");
  var _pid = dart.privateName(socket, "_pid");
  var _lastOffset = dart.privateName(socket, "_lastOffset");
  var _queue = dart.privateName(socket, "_queue");
  var _queueSeq = dart.privateName(socket, "_queueSeq");
  var _anyListeners = dart.privateName(socket, "_anyListeners");
  var _anyOutgoingListeners = dart.privateName(socket, "_anyOutgoingListeners");
  var _opts$ = dart.privateName(socket, "_opts");
  var _addToQueue = dart.privateName(socket, "_addToQueue");
  var _registerAckCallback = dart.privateName(socket, "_registerAckCallback");
  var _drainQueue = dart.privateName(socket, "_drainQueue");
  socket.Socket = class Socket extends event_emitter.EventEmitter {
    get io() {
      return this[io$];
    }
    set io(value) {
      this[io$] = value;
    }
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get connected() {
      return this[connected];
    }
    set connected(value) {
      this[connected] = value;
    }
    get recovered() {
      return this[recovered];
    }
    set recovered(value) {
      this[recovered] = value;
    }
    get auth() {
      return this[auth];
    }
    set auth(value) {
      this[auth] = value;
    }
    get receiveBuffer() {
      return this[receiveBuffer];
    }
    set receiveBuffer(value) {
      this[receiveBuffer] = value;
    }
    get sendBuffer() {
      return this[sendBuffer];
    }
    set sendBuffer(value) {
      this[sendBuffer] = value;
    }
    get nsp() {
      return this[nsp];
    }
    set nsp(value) {
      this[nsp] = value;
    }
    get ids() {
      return this[ids];
    }
    set ids(value) {
      this[ids] = value;
    }
    get acks() {
      return this[acks];
    }
    set acks(value) {
      this[acks] = value;
    }
    get subs() {
      return this[subs];
    }
    set subs(value) {
      this[subs] = value;
    }
    get flags() {
      return this[flags];
    }
    set flags(value) {
      this[flags] = value;
    }
    get query() {
      return this[query];
    }
    set query(value) {
      this[query] = value;
    }
    static ['_#new#tearOff'](io, nsp, _opts) {
      return new socket.Socket.new(io, nsp, _opts);
    }
    get disconnected() {
      return !this.connected;
    }
    subEvents() {
      let t$3622;
      if ((t$3622 = this.subs, t$3622 == null ? null : t$3622[$isNotEmpty]) === true) return;
      let io = this.io;
      this.subs = [on.on(io, "open", dart.tearoff(this, null, 'onopen')), on.on(io, "packet", dart.tearoff(this, null, 'onpacket')), on.on(io, "error", dart.tearoff(this, null, 'onerror')), on.on(io, "close", dart.tearoff(this, null, 'onclose'))];
    }
    get active() {
      return this.subs != null;
    }
    open() {
      return this.connect();
    }
    connect() {
      if (this.connected) return this;
      this.subEvents();
      if (!this.io.reconnecting) {
        this.io.open();
      }
      if ("open" === this.io.readyState) this.onopen();
      return this;
    }
    send(args) {
      this.emit("message", args);
      return this;
    }
    emit(event, data = null) {
      this.emitWithAck(event, data);
    }
    emitWithAck(event, data, opts) {
      let t$3622, t$3622$, t$3622$0;
      let ack = opts && 'ack' in opts ? opts.ack : null;
      let binary = opts && 'binary' in opts ? opts.binary : false;
      if (socket.reservedEvents[$containsKey](event)) {
        dart.throw(core.Exception.new("\"" + event + "\" is a reserved event name"));
      }
      let sendData = [event];
      if (T.ByteBuffer()[_is](data) || T.ListOfint()[_is](data)) {
        sendData[$add](data);
      } else if (T.Iterable()[_is](data)) {
        sendData[$addAll](data);
      } else if (data != null) {
        sendData[$add](data);
      }
      if ((t$3622 = this[_opts$], t$3622 == null ? null : t$3622[$_get]("retries")) != null && !this.flags[$containsKey]("fromQueue") && !this.flags[$containsKey]("volatile")) {
        if (ack != null) {
          sendData[$add](ack);
        }
        this[_addToQueue](sendData);
        return;
      }
      let packet = new _js_helper.IdentityMap.from(T.IdentityMapOfString$Object(), ["type", 2, "data", sendData, "options", new _js_helper.IdentityMap.from(T.IdentityMapOfString$bool(), ["compress", this.flags[$isNotEmpty] === true && dart.dtest((t$3622$ = this.flags[$_get]("compress"), t$3622$ == null ? false : t$3622$))])]);
      if (ack != null) {
        socket._logger.fine("emitting packet with ack id " + dart.str(this.ids));
        let id = (t$3622$0 = this.ids, this.ids = t$3622$0 + 1, t$3622$0);
        this[_registerAckCallback](id[$toInt](), ack);
        packet[$_set]("id", dart.str(id));
      }
      let isTransportWritable = this.io.engine != null && dart.nullCheck(this.io.engine).transport != null && dart.nullCheck(dart.nullCheck(this.io.engine).transport).writable === true;
      let discardPacket = this.flags[$_get]("volatile") != null && (!isTransportWritable || !this.connected);
      if (discardPacket) {
        socket._logger.fine("discard packet as the transport is not currently writable");
      } else if (this.connected) {
        this.notifyOutgoingListeners(packet);
        this.packet(packet);
      } else {
        this.sendBuffer[$add](packet);
      }
      this.flags = new _js_helper.LinkedMap.new(T.LinkedMap());
    }
    emitWithAckAsync(event, data, opts) {
      let ack = opts && 'ack' in opts ? opts.ack : null;
      let binary = opts && 'binary' in opts ? opts.binary : false;
      let withErr = this.flags[$_get]("timeout") != null || dart.nullCheck(this[_opts$])[$_get]("ackTimeout") != null;
      let completer = async.Completer.new(T.Completer());
      this.emitWithAck(event, data, {ack: dart.fn((arg1, arg2 = null) => {
          if (withErr) {
            if (arg1 != null) {
              completer.completeError(dart_rti._asObject(arg1));
            } else {
              if (ack != null) dart.dcall(ack, [arg2]);
              completer.complete(arg2);
            }
          } else {
            if (ack != null) dart.dcall(ack, [arg1]);
            completer.complete(arg1);
          }
        }, T.dynamicAnddynamicToNull()), binary: binary});
      return completer.future;
    }
    [_addToQueue](args) {
      let t$3622;
      let ack = null;
      if (T.Function()[_is](args[$last])) {
        ack = T.FunctionN()[_as](args[$removeLast]());
      }
      let packet = new _js_helper.IdentityMap.from(T.IdentityMapOfString$Object(), ["id", (t$3622 = this[_queueSeq], this[_queueSeq] = t$3622 + 1, t$3622), "tryCount", 0, "pending", false, "args", args, "flags", (() => {
          let t$3622 = collection.LinkedHashMap.of(T.LinkedHashMap(), this.flags);
          t$3622[$_set]("fromQueue", true);
          return t$3622;
        })()]);
      args[$add](dart.fn((err, responseArgs) => {
        if (!dart.equals(packet, this[_queue][$first])) {
          return;
        }
        let hasError = err != null;
        if (hasError) {
          if (T.int()[_is](packet[$_get]("tryCount")) && T.int()[_is](dart.nullCheck(this[_opts$])[$_get]("retries")) && dart_rti._asInt(packet[$_get]("tryCount")) > dart_rti._asInt(dart.nullCheck(this[_opts$])[$_get]("retries"))) {
            socket._logger.fine("packet [" + dart.str(packet[$_get]("id")) + "] is discarded after " + dart.str(packet[$_get]("tryCount")) + " tries");
            this[_queue][$removeAt](0);
            if (ack != null) {
              dart.dcall(ack, [err]);
            }
          }
        } else {
          socket._logger.fine("packet [" + dart.str(packet[$_get]("id")) + "] was successfully sent");
          this[_queue][$removeAt](0);
          if (ack != null) {
            dart.dcall(ack, [null, responseArgs]);
          }
        }
        packet[$_set]("pending", false);
        return this[_drainQueue]();
      }, T.dynamicAnddynamicTovoid()));
      this[_queue][$add](packet);
      this[_drainQueue]();
    }
    [_drainQueue](force = false) {
      let t$3624, t$3623;
      socket._logger.fine("draining queue");
      if (!this.connected || this[_queue][$isEmpty]) {
        return;
      }
      let packet = this[_queue][$first];
      if (dart.dtest(dart.dsend(packet, '_get', ["pending"])) && !force) {
        socket._logger.fine("packet [" + dart.str(dart.dsend(packet, '_get', ["id"])) + "] has already been sent and is waiting for an ack");
        return;
      }
      dart.dsend(packet, '_set', ["pending", true]);
      t$3623 = packet;
      t$3624 = "tryCount";
      dart.dsend(t$3623, '_set', [t$3624, dart.dsend(dart.dsend(t$3623, '_get', [t$3624]), '+', [1])]);
      socket._logger.fine("sending packet [" + dart.str(dart.dsend(packet, '_get', ["id"])) + "] (try n°" + dart.str(dart.dsend(packet, '_get', ["tryCount"])) + ")");
      this.flags = T.Map()[_as](dart.dsend(packet, '_get', ["flags"]));
      let args = T.List()[_as](dart.dsend(packet, '_get', ["args"]));
      let evt = args[$removeAt](0);
      let ack = T.Function()[_is](args[$last]) ? args[$removeLast]() : null;
      this.emitWithAck(dart_rti._asString(evt), args, {ack: T.FunctionN()[_as](ack)});
    }
    [_registerAckCallback](id, ack) {
      let t$3624, t$3623;
      let sid = dart.strSafe(id);
      let timeout = (t$3623 = this.flags[$_get]("timeout"), t$3623 == null ? (t$3624 = this[_opts$], t$3624 == null ? null : t$3624[$_get]("ackTimeout")) : t$3623);
      if (timeout == null) {
        this.acks[$_set](sid, ack);
        return;
      }
      let timer = async.Timer.new(new core.Duration.new({milliseconds: dart_rti._asInt(timeout)}), dart.fn(() => {
        this.acks[$remove](sid);
        for (let i = 0; i < this.sendBuffer[$length]; i = i + 1) {
          if (dart.equals(dart.dsend(this.sendBuffer[$_get](i), '_get', ["id"]), sid)) {
            socket._logger.fine("removing packet with ack id " + sid + " from the buffer");
            this.sendBuffer[$removeAt](i);
          }
        }
        socket._logger.fine("event with ack id " + sid + " has timed out after " + dart.str(timeout) + " ms");
        dart.dcall(ack, [core.Exception.new("operation has timed out")]);
      }, T.VoidTovoid()));
      this.acks[$_set](sid, dart.fn(args => {
        timer.cancel();
        core.Function.apply(ack, (() => {
          let t$3623 = [null];
          t$3623[$addAll](T.List()[_is](args) ? args : [args]);
          return t$3623;
        })());
      }, T.dynamicToNull()));
    }
    notifyOutgoingListeners(packet) {
      if (this[_anyOutgoingListeners][$isNotEmpty]) {
        let listeners = core.List.from(T.List(), this[_anyOutgoingListeners]);
        for (let listener of listeners) {
          core.Function.apply(T.Function()[_as](listener), T.ListN()[_as](packet[$_get]("data")));
        }
      }
    }
    packet(packet) {
      packet[$_set]("nsp", this.nsp);
      this.io.packet(packet);
    }
    onopen(_ = null) {
      socket._logger.fine("transport is open - connecting");
      if (T.Function()[_is](this.auth)) {
        dart.dsend(this, 'auth', [dart.fn(data => {
            this.sendConnectPacket(T.MapN()[_as](data));
          }, T.dynamicToNull())]);
      } else {
        this.sendConnectPacket(T.MapN()[_as](this.auth));
      }
    }
    sendConnectPacket(data) {
      let t$3625;
      this.packet(new _js_helper.LinkedMap.from(T.LinkedMap(), ["type", 0, "data", this[_pid] != null ? (() => {
          let t$3624 = new _js_helper.LinkedMap.new(T.LinkedMap());
          t$3624[$_set]("pid", this[_pid]);
          t$3624[$_set]("offset", this[_lastOffset]);
          t$3624[$addAll]((t$3625 = data, t$3625 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3625));
          return t$3624;
        })() : data]));
    }
    onerror(err) {
      if (!this.connected) {
        this.emitReserved("connect_error", err);
      }
    }
    onclose(reason) {
      socket._logger.fine("close (" + dart.str(reason) + ")");
      this.emitReserved("disconnecting", reason);
      this.connected = false;
      this.id = null;
      this.emitReserved("disconnect", reason);
    }
    onpacket(packet) {
      if (!dart.equals(dart.dsend(packet, '_get', ["nsp"]), this.nsp)) return;
      switch (dart.dsend(packet, '_get', ["type"])) {
        case 0:
          {
            if (dart.dsend(packet, '_get', ["data"]) != null && dart.dsend(dart.dsend(packet, '_get', ["data"]), '_get', ["sid"]) != null) {
              let id = dart.dsend(dart.dsend(packet, '_get', ["data"]), '_get', ["sid"]);
              let pid = dart.dsend(dart.dsend(packet, '_get', ["data"]), '_get', ["pid"]);
              this.onconnect(id, pid);
            } else {
              this.emitReserved("connect_error", "It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)");
            }
            break;
          }
        case 2:
        case 5:
          {
            this.onevent(T.Map()[_as](packet));
            break;
          }
        case 3:
        case 6:
          {
            this.onack(T.Map()[_as](packet));
            break;
          }
        case 1:
          {
            this.ondisconnect();
            break;
          }
        case 4:
          {
            this.destroy();
            this.emitReserved("error", dart.dsend(packet, '_get', ["data"]));
            break;
          }
      }
    }
    onevent(packet) {
      let t$3625;
      let args = T.List()[_as]((t$3625 = packet[$_get]("data"), t$3625 == null ? [] : t$3625));
      socket._logger.fine("emitting event " + dart.str(args));
      if (packet[$_get]("id") != null) {
        socket._logger.fine("attaching ack callback to event");
        args[$add](this.ack(packet[$_get]("id")));
      }
      if (this.connected === true) {
        this.emitEvent(args);
      } else {
        this.receiveBuffer[$add](args);
      }
    }
    emitEvent(args) {
      if (this[_anyListeners][$isNotEmpty]) {
        let listeners = core.List.from(T.List(), this[_anyListeners]);
        for (let listener of listeners) {
          if (args[$length] > 2) {
            core.Function.apply(T.Function()[_as](listener), [args[$first], args[$sublist](1)]);
          } else {
            core.Function.apply(T.Function()[_as](listener), args);
          }
        }
      }
      if (args[$length] > 2) {
        core.Function.apply(dart.superTearoff(this, event_emitter.EventEmitter, 'emit'), [args[$first], args[$sublist](1)]);
      } else {
        core.Function.apply(dart.superTearoff(this, event_emitter.EventEmitter, 'emit'), args);
      }
      if (this[_pid] != null && args[$isNotEmpty] && dart.equals(dart.runtimeType(args[$last]), dart_rti.createRuntimeType(T.String()))) {
        this[_lastOffset] = dart_rti._asStringQ(args[$last]);
      }
    }
    ack(id) {
      let sent = false;
      return dart.fn(data => {
        if (sent) return;
        sent = true;
        socket._logger.fine("sending ack " + dart.str(data));
        let sendData = [];
        if (T.ByteBuffer()[_is](data) || T.ListOfint()[_is](data)) {
          sendData[$add](data);
        } else if (T.Iterable()[_is](data)) {
          sendData[$addAll](data);
        } else if (data != null) {
          sendData[$add](data);
        }
        this.packet(new _js_helper.LinkedMap.from(T.LinkedMap(), ["type", 3, "id", id, "data", sendData]));
      }, T.dynamicToNull());
    }
    onack(packet) {
      let ack = this.acks[$remove](dart.str(packet[$_get]("id")));
      if (T.Function()[_is](ack)) {
        socket._logger.fine("calling ack " + dart.str(packet[$_get]("id")) + " with " + dart.str(packet[$_get]("data")));
        let args = T.List()[_as](packet[$_get]("data"));
        if (args[$length] > 1) {
          core.Function.apply(ack, [args]);
        } else {
          core.Function.apply(ack, args);
        }
      } else {
        socket._logger.fine("bad ack " + dart.str(packet[$_get]("id")));
      }
    }
    onconnect(id, pid) {
      this.id = dart_rti._asStringQ(id);
      this.recovered = pid != null && core.identical(this[_pid], pid);
      this[_pid] = dart_rti._asStringQ(pid);
      this.connected = true;
      this.emitBuffered();
      this.emitReserved("connect");
      this[_drainQueue](true);
    }
    emitBuffered() {
      for (let args of this.receiveBuffer) {
        this.emitEvent(T.List()[_as](args));
      }
      this.receiveBuffer = [];
      for (let packet of this.sendBuffer) {
        this.notifyOutgoingListeners(T.Map()[_as](packet));
        this.packet(T.Map()[_as](packet));
      }
      this.sendBuffer = [];
    }
    ondisconnect() {
      socket._logger.fine("server disconnect (" + this.nsp + ")");
      this.destroy();
      this.onclose("io server disconnect");
    }
    destroy() {
      let subs0 = this.subs;
      if (subs0 != null && subs0[$isNotEmpty]) {
        for (let i = 0; i < subs0[$length]; i = i + 1) {
          dart.dsend(subs0[$_get](i), 'destroy', []);
        }
        this.subs = null;
      }
      this.io.destroy(this);
    }
    close() {
      return this.disconnect();
    }
    disconnect() {
      if (this.connected === true) {
        socket._logger.fine("performing disconnect (" + this.nsp + ")");
        this.packet(new _js_helper.LinkedMap.from(T.LinkedMap(), ["type", 1]));
      }
      this.destroy();
      if (this.connected === true) {
        this.onclose("io client disconnect");
      }
      return this;
    }
    dispose() {
      this.disconnect();
      this.clearListeners();
    }
    compress(compress) {
      this.flags[$_set]("compress", compress);
      return this;
    }
    get volatile() {
      this.flags[$_set]("volatile", true);
      return this;
    }
    timeout(timeout) {
      this.flags[$_set]("timeout", timeout);
      return this;
    }
    onAny(handler) {
      this[_anyListeners][$add](handler);
      return this;
    }
    prependAny(handler) {
      this[_anyListeners][$insert](0, handler);
      return this;
    }
    offAny(handler = null) {
      if (handler != null) {
        this[_anyListeners][$remove](handler);
      } else {
        this[_anyListeners][$clear]();
      }
      return this;
    }
    listenersAny() {
      return this[_anyListeners];
    }
    onAnyOutgoing(handler) {
      this[_anyOutgoingListeners][$add](handler);
      return this;
    }
    prependAnyOutgoing(handler) {
      this[_anyOutgoingListeners][$insert](0, handler);
      return this;
    }
    offAnyOutgoing(handler = null) {
      if (handler != null) {
        this[_anyOutgoingListeners][$remove](handler);
      } else {
        this[_anyOutgoingListeners][$clear]();
      }
      return this;
    }
    listenersAnyOutgoing() {
      return this[_anyOutgoingListeners];
    }
  };
  (socket.Socket.new = function(io, nsp$, _opts) {
    this[id] = null;
    this[_pid] = null;
    this[_lastOffset] = null;
    this[connected] = false;
    this[recovered] = false;
    this[auth] = null;
    this[receiveBuffer] = [];
    this[sendBuffer] = [];
    this[_queue] = [];
    this[_queueSeq] = 0;
    this[ids] = 0;
    this[acks] = new _js_helper.LinkedMap.new(T.LinkedMap());
    this[subs] = null;
    this[flags] = new _js_helper.LinkedMap.new(T.LinkedMap());
    this[query] = null;
    this[_anyListeners] = [];
    this[_anyOutgoingListeners] = [];
    this[io$] = io;
    this[nsp] = nsp$;
    this[_opts$] = _opts;
    dart.global.Object.getPrototypeOf(socket.Socket).new.call(this);
    if (this[_opts$] != null) {
      this.query = dart_rti._asStringQ(dart.nullCheck(this[_opts$])[$_get]("query"));
      this.auth = dart.nullCheck(this[_opts$])[$_get]("auth");
    }
    this[_opts$] == null ? this[_opts$] = new _js_helper.LinkedMap.new(T.LinkedMap()) : null;
    if (this.io.autoConnect) this.open();
  }).prototype = socket.Socket.prototype;
  dart.lazyFn(socket.Socket['_#new#tearOff'], () => T.ManagerAndStringAndMapNToSocket());
  dart.addRtiResources(socket.Socket, ["socket_io_client__src__socket|Socket"]);
  dart.setMethodSignature(socket.Socket, () => dart.global.Object.setPrototypeOf({
    subEvents: _ti => T.VoidTovoid(),
    open: _ti => T.VoidToSocket(),
    connect: _ti => T.VoidToSocket(),
    send: _ti => T.ListToSocket(),
    emitWithAck: _ti => T.StringAnddynamic__Tovoid(),
    emitWithAckAsync: _ti => T.StringAnddynamic__ToFuture(),
    [_addToQueue]: _ti => T.ListTovoid(),
    [_drainQueue]: _ti => T.boolTovoid(),
    [_registerAckCallback]: _ti => T.intAndFunctionTovoid(),
    notifyOutgoingListeners: _ti => T.MapTovoid(),
    packet: _ti => T.MapTovoid(),
    onopen: _ti => T.dynamicTovoid(),
    sendConnectPacket: _ti => T.MapNTovoid(),
    onerror: _ti => T.dynamicTovoid$1(),
    onclose: _ti => T.dynamicTovoid$1(),
    onpacket: _ti => T.dynamicTovoid$1(),
    onevent: _ti => T.MapTovoid(),
    emitEvent: _ti => T.ListTovoid(),
    ack: _ti => T.dynamicToFunction(),
    onack: _ti => T.MapTovoid(),
    onconnect: _ti => T.dynamicAnddynamicTovoid(),
    emitBuffered: _ti => T.VoidTovoid(),
    ondisconnect: _ti => T.VoidTovoid(),
    destroy: _ti => T.VoidTovoid(),
    close: _ti => T.VoidToSocket(),
    disconnect: _ti => T.VoidToSocket(),
    dispose: _ti => T.VoidTovoid(),
    compress: _ti => T.dynamicToSocket(),
    timeout: _ti => T.intToSocket(),
    onAny: _ti => T.FnToSocket(),
    prependAny: _ti => T.FnToSocket(),
    offAny: _ti => T.FnToSocket$1(),
    listenersAny: _ti => T.VoidToList(),
    onAnyOutgoing: _ti => T.FnToSocket(),
    prependAnyOutgoing: _ti => T.FnToSocket(),
    offAnyOutgoing: _ti => T.FnToSocket$1(),
    listenersAnyOutgoing: _ti => T.VoidToList()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(socket.Socket))));
  dart.setMethodsImmediateTargetSignature(socket.Socket, () => dart.global.Object.setPrototypeOf({
    subEvents: "package:socket_io_client/src/socket.dart:Socket",
    open: "package:socket_io_client/src/socket.dart:Socket",
    connect: "package:socket_io_client/src/socket.dart:Socket",
    send: "package:socket_io_client/src/socket.dart:Socket",
    emit: "package:socket_io_client/src/socket.dart:Socket",
    emitWithAck: "package:socket_io_client/src/socket.dart:Socket",
    emitWithAckAsync: "package:socket_io_client/src/socket.dart:Socket",
    [_addToQueue]: "package:socket_io_client/src/socket.dart:Socket",
    [_drainQueue]: "package:socket_io_client/src/socket.dart:Socket",
    [_registerAckCallback]: "package:socket_io_client/src/socket.dart:Socket",
    notifyOutgoingListeners: "package:socket_io_client/src/socket.dart:Socket",
    packet: "package:socket_io_client/src/socket.dart:Socket",
    onopen: "package:socket_io_client/src/socket.dart:Socket",
    sendConnectPacket: "package:socket_io_client/src/socket.dart:Socket",
    onerror: "package:socket_io_client/src/socket.dart:Socket",
    onclose: "package:socket_io_client/src/socket.dart:Socket",
    onpacket: "package:socket_io_client/src/socket.dart:Socket",
    onevent: "package:socket_io_client/src/socket.dart:Socket",
    emitEvent: "package:socket_io_client/src/socket.dart:Socket",
    ack: "package:socket_io_client/src/socket.dart:Socket",
    onack: "package:socket_io_client/src/socket.dart:Socket",
    onconnect: "package:socket_io_client/src/socket.dart:Socket",
    emitBuffered: "package:socket_io_client/src/socket.dart:Socket",
    ondisconnect: "package:socket_io_client/src/socket.dart:Socket",
    destroy: "package:socket_io_client/src/socket.dart:Socket",
    close: "package:socket_io_client/src/socket.dart:Socket",
    disconnect: "package:socket_io_client/src/socket.dart:Socket",
    dispose: "package:socket_io_client/src/socket.dart:Socket",
    compress: "package:socket_io_client/src/socket.dart:Socket",
    timeout: "package:socket_io_client/src/socket.dart:Socket",
    onAny: "package:socket_io_client/src/socket.dart:Socket",
    prependAny: "package:socket_io_client/src/socket.dart:Socket",
    offAny: "package:socket_io_client/src/socket.dart:Socket",
    listenersAny: "package:socket_io_client/src/socket.dart:Socket",
    onAnyOutgoing: "package:socket_io_client/src/socket.dart:Socket",
    prependAnyOutgoing: "package:socket_io_client/src/socket.dart:Socket",
    offAnyOutgoing: "package:socket_io_client/src/socket.dart:Socket",
    listenersAnyOutgoing: "package:socket_io_client/src/socket.dart:Socket"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(socket.Socket))));
  dart.setGetterSignature(socket.Socket, () => dart.global.Object.setPrototypeOf({
    disconnected: _ti => T.bool(),
    active: _ti => T.bool(),
    volatile: _ti => T.Socket()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(socket.Socket))));
  dart.setLibraryUri(socket.Socket, I[3]);
  dart.setFieldSignature(socket.Socket, () => dart.global.Object.setPrototypeOf({
    io: {
      type: _ti => T.Manager(),
      isConst: false,
      isFinal: false,
      libraryUri: I[4]
    },
    id: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_pid]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_lastOffset]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    connected: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    recovered: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    auth: {
      type: _ti => T.dynamic(),
      isConst: false,
      isFinal: false
    },
    receiveBuffer: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    sendBuffer: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_queue]: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_queueSeq]: {
      type: _ti => T.int(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    nsp: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_opts$]: {
      type: _ti => T.MapN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    ids: {
      type: _ti => T.num(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    acks: {
      type: _ti => T.Map(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    subs: {
      type: _ti => T.ListN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    flags: {
      type: _ti => T.Map(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    query: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_anyListeners]: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_anyOutgoingListeners]: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(socket.Socket))));
  dart.defineLazy(socket, {
    /*socket.reservedEvents*/get reservedEvents() {
      return C[0] || CT.C0;
    },
    /*socket._logger*/get _logger() {
      return logger.Logger.new("socket_io_client:Socket");
    }
  });
  (function() {
  }).prototype = socket;
  var callback = dart.privateName(on, "Destroyable.callback");
  on.Destroyable = class Destroyable extends core.Object {
    get callback() {
      return this[callback];
    }
    set callback(value) {
      this[callback] = value;
    }
    static ['_#new#tearOff'](callback) {
      return new on.Destroyable.new(callback);
    }
    destroy() {
      return dart.dsend(this, 'callback', []);
    }
  };
  (on.Destroyable.new = function(callback$) {
    this[callback] = callback$;
    ;
  }).prototype = on.Destroyable.prototype;
  dart.lazyFn(on.Destroyable['_#new#tearOff'], () => T.FunctionToDestroyable());
  dart.addRtiResources(on.Destroyable, ["socket_io_client__src__on|Destroyable"]);
  dart.setMethodSignature(on.Destroyable, () => dart.global.Object.setPrototypeOf({
    destroy: _ti => T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(on.Destroyable))));
  dart.setMethodsImmediateTargetSignature(on.Destroyable, () => dart.global.Object.setPrototypeOf({destroy: "package:socket_io_client/src/on.dart:Destroyable"}, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(on.Destroyable))));
  dart.setLibraryUri(on.Destroyable, I[5]);
  dart.setFieldSignature(on.Destroyable, () => dart.global.Object.setPrototypeOf({callback: {
      type: _ti => T.Function(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(on.Destroyable))));
  on.on = function on$(obj, ev, fn) {
    obj.on(ev, fn);
    return new on.Destroyable.new(dart.fn(() => obj.off(ev, fn), T.VoidTovoid()));
  };
  dart.lazyFn(on.on, () => T.EventEmitterAndStringAndFnToDestroyable());
  (function() {
  }).prototype = on;
  var nsps = dart.privateName(manager, "Manager.nsps");
  var subs$ = dart.privateName(manager, "Manager.subs");
  var reconnection = dart.privateName(manager, "Manager.reconnection");
  var reconnectionAttempts = dart.privateName(manager, "Manager.reconnectionAttempts");
  var timeout = dart.privateName(manager, "Manager.timeout");
  var readyState = dart.privateName(manager, "Manager.readyState");
  var reconnecting = dart.privateName(manager, "Manager.reconnecting");
  var engine = dart.privateName(manager, "Manager.engine");
  var skipReconnect = dart.privateName(manager, "Manager.skipReconnect");
  var __Manager_options = dart.privateName(manager, "_#Manager#options");
  var __Manager_options_isSet = dart.privateName(manager, "_#Manager#options#isSet");
  var _reconnectionDelay = dart.privateName(manager, "_reconnectionDelay");
  var _randomizationFactor = dart.privateName(manager, "_randomizationFactor");
  var _reconnectionDelayMax = dart.privateName(manager, "_reconnectionDelayMax");
  var _backoff = dart.privateName(manager, "_backoff");
  var __Manager_uri = dart.privateName(manager, "_#Manager#uri");
  var __Manager_encoder = dart.privateName(manager, "_#Manager#encoder");
  var __Manager_decoder = dart.privateName(manager, "_#Manager#decoder");
  var __Manager_autoConnect = dart.privateName(manager, "_#Manager#autoConnect");
  var _httpClientAdapter = dart.privateName(manager, "_httpClientAdapter");
  manager.Manager = class Manager extends event_emitter.EventEmitter {
    get nsps() {
      return this[nsps];
    }
    set nsps(value) {
      this[nsps] = value;
    }
    get subs() {
      return this[subs$];
    }
    set subs(value) {
      this[subs$] = value;
    }
    get reconnection() {
      return this[reconnection];
    }
    set reconnection(value) {
      this[reconnection] = value;
    }
    get reconnectionAttempts() {
      return this[reconnectionAttempts];
    }
    set reconnectionAttempts(value) {
      this[reconnectionAttempts] = value;
    }
    get timeout() {
      return this[timeout];
    }
    set timeout(value) {
      this[timeout] = value;
    }
    get readyState() {
      return this[readyState];
    }
    set readyState(value) {
      this[readyState] = value;
    }
    get reconnecting() {
      return this[reconnecting];
    }
    set reconnecting(value) {
      this[reconnecting] = value;
    }
    get engine() {
      return this[engine];
    }
    set engine(value) {
      this[engine] = value;
    }
    get skipReconnect() {
      return this[skipReconnect];
    }
    set skipReconnect(value) {
      this[skipReconnect] = value;
    }
    set options(options$35param) {
      this[__Manager_options_isSet] = true;
      this[__Manager_options] = options$35param;
    }
    get options() {
      return this[__Manager_options_isSet] ? this[__Manager_options] : dart.throw(new _internal.LateError.fieldNI("options"));
    }
    get uri() {
      let t$3627;
      t$3627 = this[__Manager_uri];
      return t$3627 == null ? dart.throw(new _internal.LateError.fieldNI("uri")) : t$3627;
    }
    set uri(uri$35param) {
      this[__Manager_uri] = uri$35param;
    }
    get encoder() {
      let t$3627;
      t$3627 = this[__Manager_encoder];
      return t$3627 == null ? dart.throw(new _internal.LateError.fieldNI("encoder")) : t$3627;
    }
    set encoder(encoder$35param) {
      this[__Manager_encoder] = encoder$35param;
    }
    get decoder() {
      let t$3627;
      t$3627 = this[__Manager_decoder];
      return t$3627 == null ? dart.throw(new _internal.LateError.fieldNI("decoder")) : t$3627;
    }
    set decoder(decoder$35param) {
      this[__Manager_decoder] = decoder$35param;
    }
    get autoConnect() {
      let t$3627;
      t$3627 = this[__Manager_autoConnect];
      return t$3627 == null ? dart.throw(new _internal.LateError.fieldNI("autoConnect")) : t$3627;
    }
    set autoConnect(autoConnect$35param) {
      this[__Manager_autoConnect] = autoConnect$35param;
    }
    static ['_#new#tearOff'](opts) {
      let uri = opts && 'uri' in opts ? opts.uri : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return new manager.Manager.new({uri: uri, options: options});
    }
    get reconnectionDelay() {
      return this[_reconnectionDelay];
    }
    set reconnectionDelay(v) {
      let t$3627;
      this[_reconnectionDelay] = v;
      t$3627 = this[_backoff];
      t$3627 == null ? null : t$3627.min = v;
    }
    get randomizationFactor() {
      return this[_randomizationFactor];
    }
    set randomizationFactor(v) {
      let t$3627;
      this[_randomizationFactor] = v;
      t$3627 = this[_backoff];
      t$3627 == null ? null : t$3627.jitter = v;
    }
    get reconnectionDelayMax() {
      return this[_reconnectionDelayMax];
    }
    set reconnectionDelayMax(v) {
      let t$3627;
      this[_reconnectionDelayMax] = v;
      t$3627 = this[_backoff];
      t$3627 == null ? null : t$3627.max = v;
    }
    maybeReconnectOnOpen() {
      if (!this.reconnecting && this.reconnection === true && dart.nullCheck(this[_backoff]).attempts === 0) {
        this.reconnect();
      }
    }
    open(opts) {
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let opts$ = opts && 'opts' in opts ? opts.opts : null;
      manager._logger.fine("readyState " + this.readyState);
      if (this.readyState[$contains]("open")) return this;
      manager._logger.fine("opening " + this.uri);
      this.engine = new socket$.Socket.new(this.uri, this.options);
      let socket = dart.nullCheck(this.engine);
      this.readyState = "opening";
      this.skipReconnect = false;
      let openSubDestroy = on.on(socket, "open", dart.fn(_ => {
        this.onopen();
        if (callback != null) dart.dcall(callback, []);
      }, T.dynamicToNull()));
      let onError = null;
      let errorSub = on.on(socket, "error", onError = dart.fn(error => {
        manager._logger.fine("error");
        this.cleanup();
        this.readyState = "closed";
        this.emitReserved("error", error);
        if (callback != null) {
          dart.dcall(callback, [new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["error", "Connection error", "data", error])]);
        } else {
          this.maybeReconnectOnOpen();
        }
      }, T.dynamicToNull()));
      if (this.timeout != null) {
        manager._logger.fine("connect attempt will timeout after " + dart.str(this.timeout));
        if (this.timeout === 0) {
          openSubDestroy.destroy();
        }
        let timer = async.Timer.new(new core.Duration.new({milliseconds: dart.nullCheck(this.timeout)[$toInt]()}), dart.fn(() => {
          manager._logger.fine("connect attempt timed out after " + dart.str(this.timeout));
          openSubDestroy.destroy();
          onError("timeout");
          socket.close();
        }, T.VoidTovoid()));
        this.subs[$add](new on.Destroyable.new(dart.fn(() => timer.cancel(), T.VoidTovoid())));
      }
      this.subs[$add](openSubDestroy);
      this.subs[$add](errorSub);
      return this;
    }
    connect(opts) {
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let opts$ = opts && 'opts' in opts ? opts.opts : null;
      return this.open({callback: callback, opts: opts$});
    }
    onopen(_ = null) {
      manager._logger.fine("open");
      this.cleanup();
      this.readyState = "open";
      this.emitReserved("open");
      let socket = dart.nullCheck(this.engine);
      this.subs[$add](on.on(socket, "ping", dart.tearoff(this, null, 'onping')));
      this.subs[$add](on.on(socket, "data", dart.tearoff(this, null, 'ondata')));
      this.subs[$add](on.on(socket, "error", dart.tearoff(this, null, 'onerror')));
      this.subs[$add](on.on(socket, "close", dart.tearoff(this, null, 'onclose')));
      this.subs[$add](on.on(this.decoder, "decoded", dart.tearoff(this, null, 'ondecoded')));
    }
    onping(_ = null) {
      this.emitReserved("ping");
    }
    ondata(data) {
      try {
        this.decoder.add(data);
      } catch (t$36$35e) {
        let e = dart.getThrown(t$36$35e);
        if (T.Object()[_is](e)) {
          this.onclose("parse error");
        } else
          throw t$36$35e;
      }
    }
    ondecoded(packet) {
      async.Future.microtask(T.FutureOfNull(), dart.fn(() => {
        this.emitReserved("packet", packet);
      }, T.VoidToNull()));
    }
    onerror(err) {
      manager._logger.fine("error " + dart.str(err));
      this.emitReserved("error", err);
    }
    socket(nsp, opts) {
      let socket$ = this.nsps[$_get](nsp);
      if (socket$ == null) {
        socket$ = new socket.Socket.new(this, nsp, opts);
        this.nsps[$_set](nsp, socket$);
      } else if (this.autoConnect && !socket$.active) {
        socket$.connect();
      }
      return socket$;
    }
    destroy(socket) {
      let nsps = this.nsps[$keys];
      for (let nsp of nsps) {
        let socket$ = this.nsps[$_get](nsp);
        if (dart.nullCheck(socket$).active) {
          manager._logger.fine("socket " + nsp + " is still active, skipping close");
          return;
        }
      }
      this.close();
    }
    packet(packet) {
      manager._logger.fine("writing packet " + dart.str(packet));
      let encodedPackets = this.encoder.encode(packet);
      for (let i = 0; i < dart_rti._asNum(dart.dload(encodedPackets, 'length')); i = i + 1) {
        dart.nullCheck(this.engine).write(dart.dsend(encodedPackets, '_get', [i]), packet[$_get]("options"));
      }
    }
    cleanup() {
      manager._logger.fine("cleanup");
      let subsLength = this.subs[$length];
      for (let i = 0; i < subsLength; i = i + 1) {
        let sub = this.subs[$removeAt](0);
        dart.dsend(sub, 'destroy', []);
      }
      this.decoder.destroy();
    }
    close() {
      return this.disconnect();
    }
    disconnect() {
      let t$3628;
      manager._logger.fine("disconnect");
      this.skipReconnect = true;
      this.reconnecting = false;
      this.onclose("forced close");
      t$3628 = this.engine;
      t$3628 == null ? null : t$3628.close();
    }
    onclose(error) {
      manager._logger.fine("closed due to " + dart.str(T.Map()[_is](error) ? error[$_get]("reason") : error));
      this.cleanup();
      dart.nullCheck(this[_backoff]).reset();
      this.readyState = "closed";
      this.emitReserved("close", T.Map()[_is](error) ? error[$_get]("reason") : error);
      if (this.reconnection === true && !dart.nullCheck(this.skipReconnect)) {
        this.reconnect();
      }
    }
    reconnect() {
      if (this.reconnecting || dart.nullCheck(this.skipReconnect)) return this;
      if (dart.nullCheck(this[_backoff]).attempts >= dart.nullCheck(this.reconnectionAttempts)) {
        manager._logger.fine("reconnect failed");
        dart.nullCheck(this[_backoff]).reset();
        this.emitReserved("reconnect_failed");
        this.reconnecting = false;
      } else {
        let delay = dart.nullCheck(this[_backoff]).duration;
        manager._logger.fine("will wait %dms before reconnect attempt", delay);
        this.reconnecting = true;
        let timer = async.Timer.new(new core.Duration.new({milliseconds: delay[$toInt]()}), dart.fn(() => {
          if (dart.nullCheck(this.skipReconnect)) return;
          manager._logger.fine("attempting reconnect");
          this.emit("reconnect_attempt", dart.nullCheck(this[_backoff]).attempts);
          if (dart.nullCheck(this.skipReconnect)) return;
          this.open({callback: dart.fn((err = null) => {
              if (err != null) {
                manager._logger.fine("reconnect attempt error");
                this.reconnecting = false;
                this.reconnect();
                this.emitReserved("reconnect_error", dart.dsend(err, '_get', ["data"]));
              } else {
                manager._logger.fine("reconnect success");
                this.onreconnect();
              }
            }, T.dynamicToNull$1())});
        }, T.VoidTovoid()));
        this.subs[$add](new on.Destroyable.new(dart.fn(() => timer.cancel(), T.VoidTovoid())));
      }
      return this;
    }
    onreconnect() {
      let attempt = dart.nullCheck(this[_backoff]).attempts;
      this.reconnecting = false;
      dart.nullCheck(this[_backoff]).reset();
      this.emit("reconnect", attempt);
    }
  };
  (manager.Manager.new = function(opts) {
    let t$3625, t$3626, t$3628, t$3627, t$3627$, t$3627$0, t$3627$1, t$3627$2, t$3627$3;
    let uri = opts && 'uri' in opts ? opts.uri : null;
    let options = opts && 'options' in opts ? opts.options : null;
    this[nsps] = new _js_helper.IdentityMap.new(T.IdentityMapOfString$Socket());
    this[subs$] = [];
    this[__Manager_options] = null;
    this[__Manager_options_isSet] = false;
    this[reconnection] = null;
    this[reconnectionAttempts] = null;
    this[_reconnectionDelay] = null;
    this[_randomizationFactor] = null;
    this[_reconnectionDelayMax] = null;
    this[timeout] = null;
    this[_backoff] = null;
    this[readyState] = "closed";
    this[__Manager_uri] = null;
    this[reconnecting] = false;
    this[engine] = null;
    this[__Manager_encoder] = null;
    this[__Manager_decoder] = null;
    this[__Manager_autoConnect] = null;
    this[skipReconnect] = null;
    this[_httpClientAdapter] = http_client_adapter_factory.createPlatformHttpClientAdapter();
    dart.global.Object.getPrototypeOf(manager.Manager).new.call(this);
    options = (t$3625 = options, t$3625 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3625);
    options[$_set]("transportOptions", (() => {
      let t$3625 = new _js_helper.LinkedMap.new(T.LinkedMap());
      t$3625[$_set]("websocket", new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["httpClientAdapter", (t$3626 = options[$_get]("httpClientAdapter"), t$3626 == null ? this[_httpClientAdapter] : t$3626)]));
      let t$3626$ = T.MapN()[_as](options[$_get]("transportOptions"));
      if (t$3626$ != null) t$3625[$addAll](t$3626$);
      return t$3625;
    })());
    t$3627 = options;
    t$3628 = "path";
    t$3627[$_get](t$3628) == null ? t$3627[$_set](t$3628, "/socket.io") : null;
    this.options = options;
    this.reconnection = !dart.equals(options[$_get]("reconnection"), false);
    this.reconnectionAttempts = dart_rti._asNumQ((t$3627$ = options[$_get]("reconnectionAttempts"), t$3627$ == null ? 1 / 0 : t$3627$));
    this.reconnectionDelay = dart_rti._asNumQ((t$3627$0 = options[$_get]("reconnectionDelay"), t$3627$0 == null ? 1000 : t$3627$0));
    this.reconnectionDelayMax = dart_rti._asNumQ((t$3627$1 = options[$_get]("reconnectionDelayMax"), t$3627$1 == null ? 5000 : t$3627$1));
    this.randomizationFactor = dart_rti._asNumQ((t$3627$2 = options[$_get]("randomizationFactor"), t$3627$2 == null ? 0.5 : t$3627$2));
    this[_backoff] = new manager._Backoff.new({min: this.reconnectionDelay, max: this.reconnectionDelayMax, jitter: this.randomizationFactor});
    this.timeout = dart_rti._asNumQ((t$3627$3 = options[$_get]("timeout"), t$3627$3 == null ? 20000 : t$3627$3));
    this.readyState = "closed";
    this.uri = dart_rti._asString(uri);
    if (options[$_get]("parser") != null) {
      this.encoder = T.Encoder()[_as](dart.dsend(options[$_get]("parser"), 'encoder', []));
      this.decoder = T.Decoder()[_as](dart.dsend(options[$_get]("parser"), 'decoder', []));
    } else {
      this.encoder = new parser$.Encoder.new();
      this.decoder = new parser$.Decoder.new();
    }
    this.autoConnect = !dart.equals(options[$_get]("autoConnect"), false);
    if (this.autoConnect) this.open();
  }).prototype = manager.Manager.prototype;
  dart.lazyFn(manager.Manager['_#new#tearOff'], () => T.__ToManager());
  dart.addRtiResources(manager.Manager, ["socket_io_client__src__manager|Manager"]);
  dart.setMethodSignature(manager.Manager, () => dart.global.Object.setPrototypeOf({
    maybeReconnectOnOpen: _ti => T.VoidTovoid(),
    open: _ti => T.__ToManager$1(),
    connect: _ti => T.__ToManager$1(),
    onopen: _ti => T.dynamicTovoid(),
    onping: _ti => T.dynamicTovoid(),
    ondata: _ti => T.dynamicTovoid$1(),
    ondecoded: _ti => T.dynamicTovoid$1(),
    onerror: _ti => T.dynamicTovoid$1(),
    socket: _ti => T.StringAndMapToSocket(),
    destroy: _ti => T.dynamicTovoid$1(),
    packet: _ti => T.MapTovoid(),
    cleanup: _ti => T.VoidTovoid(),
    close: _ti => T.VoidTovoid(),
    disconnect: _ti => T.VoidTovoid(),
    onclose: _ti => T.dynamicTovoid$1(),
    reconnect: _ti => T.VoidToManager(),
    onreconnect: _ti => T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(manager.Manager))));
  dart.setMethodsImmediateTargetSignature(manager.Manager, () => dart.global.Object.setPrototypeOf({
    maybeReconnectOnOpen: "package:socket_io_client/src/manager.dart:Manager",
    open: "package:socket_io_client/src/manager.dart:Manager",
    connect: "package:socket_io_client/src/manager.dart:Manager",
    onopen: "package:socket_io_client/src/manager.dart:Manager",
    onping: "package:socket_io_client/src/manager.dart:Manager",
    ondata: "package:socket_io_client/src/manager.dart:Manager",
    ondecoded: "package:socket_io_client/src/manager.dart:Manager",
    onerror: "package:socket_io_client/src/manager.dart:Manager",
    socket: "package:socket_io_client/src/manager.dart:Manager",
    destroy: "package:socket_io_client/src/manager.dart:Manager",
    packet: "package:socket_io_client/src/manager.dart:Manager",
    cleanup: "package:socket_io_client/src/manager.dart:Manager",
    close: "package:socket_io_client/src/manager.dart:Manager",
    disconnect: "package:socket_io_client/src/manager.dart:Manager",
    onclose: "package:socket_io_client/src/manager.dart:Manager",
    reconnect: "package:socket_io_client/src/manager.dart:Manager",
    onreconnect: "package:socket_io_client/src/manager.dart:Manager"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(manager.Manager))));
  dart.setGetterSignature(manager.Manager, () => dart.global.Object.setPrototypeOf({
    options: _ti => T.MapN(),
    uri: _ti => T.String(),
    encoder: _ti => T.Encoder(),
    decoder: _ti => T.Decoder(),
    autoConnect: _ti => T.bool(),
    reconnectionDelay: _ti => T.numN(),
    randomizationFactor: _ti => T.numN(),
    reconnectionDelayMax: _ti => T.numN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(manager.Manager))));
  dart.setSetterSignature(manager.Manager, () => dart.global.Object.setPrototypeOf({
    options: _ti => T.MapN(),
    uri: _ti => T.String(),
    encoder: _ti => T.Encoder(),
    decoder: _ti => T.Decoder(),
    autoConnect: _ti => T.bool(),
    reconnectionDelay: _ti => T.numN(),
    randomizationFactor: _ti => T.numN(),
    reconnectionDelayMax: _ti => T.numN()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(manager.Manager))));
  dart.setLibraryUri(manager.Manager, I[4]);
  dart.setFieldSignature(manager.Manager, () => dart.global.Object.setPrototypeOf({
    nsps: {
      type: _ti => T.MapOfString$Socket(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    subs: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Manager_options]: {
      type: _ti => T.MapN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Manager_options_isSet]: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_httpClientAdapter]: {
      type: _ti => T.HttpClientAdapter(),
      isConst: false,
      isFinal: true,
      libraryUri: I[0]
    },
    reconnection: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    reconnectionAttempts: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_reconnectionDelay]: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_randomizationFactor]: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_reconnectionDelayMax]: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    timeout: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_backoff]: {
      type: _ti => T._BackoffN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[4]
    },
    readyState: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Manager_uri]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    reconnecting: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    engine: {
      type: _ti => T.SocketN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[6]
    },
    [__Manager_encoder]: {
      type: _ti => T.EncoderN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[7]
    },
    [__Manager_decoder]: {
      type: _ti => T.DecoderN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[7]
    },
    [__Manager_autoConnect]: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    skipReconnect: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(manager.Manager))));
  var ___Backoff__jitter = dart.privateName(manager, "_#_Backoff#_jitter");
  var _ms = dart.privateName(manager, "_ms");
  var _max = dart.privateName(manager, "_max");
  var _factor = dart.privateName(manager, "_factor");
  var _jitter = dart.privateName(manager, "_jitter");
  manager._Backoff = class _Backoff extends core.Object {
    get [_jitter]() {
      let t$3628;
      t$3628 = this[___Backoff__jitter];
      return t$3628 == null ? dart.throw(new _internal.LateError.fieldNI("_jitter")) : t$3628;
    }
    set [_jitter](_jitter$35param) {
      this[___Backoff__jitter] = _jitter$35param;
    }
    static ['_#new#tearOff'](opts) {
      let min = opts && 'min' in opts ? opts.min : 100;
      let max = opts && 'max' in opts ? opts.max : 10000;
      let jitter = opts && 'jitter' in opts ? opts.jitter : 0;
      let factor = opts && 'factor' in opts ? opts.factor : 2;
      return new manager._Backoff.new({min: min, max: max, jitter: jitter, factor: factor});
    }
    get duration() {
      let t$3628;
      let ms = math.min(T.num(), this[_ms] * math.pow(this[_factor], (t$3628 = this.attempts, this.attempts = t$3628 + 1, t$3628)), 1e+100);
      if (this[_jitter] > 0) {
        let rand = math.Random.new().nextDouble();
        let deviation = (rand * this[_jitter] * ms)[$floor]();
        ms = ((rand * 10)[$floor]() & 1) === 0 ? ms - deviation : ms + deviation;
      }
      ms = math.min(T.num(), ms, this[_max]);
      return ms <= 0 ? this[_max] : ms;
    }
    reset() {
      this.attempts = 0;
    }
    set min(min) {
      return this[_ms] = dart_rti._asNum(min);
    }
    set max(max) {
      return this[_max] = dart_rti._asNum(max);
    }
    set jitter(jitter) {
      return this[_jitter] = dart_rti._asNum(jitter);
    }
  };
  (manager._Backoff.new = function(opts) {
    let min = opts && 'min' in opts ? opts.min : 100;
    let max = opts && 'max' in opts ? opts.max : 10000;
    let jitter = opts && 'jitter' in opts ? opts.jitter : 0;
    let factor = opts && 'factor' in opts ? opts.factor : 2;
    this[___Backoff__jitter] = null;
    this.attempts = 0;
    this[_ms] = dart_rti._asNum(min);
    this[_max] = dart_rti._asNum(max);
    this[_factor] = dart_rti._asNum(factor);
    this[_jitter] = dart_rti._asNum(dart.dtest(dart.dsend(jitter, '>', [0])) && dart.dtest(dart.dsend(jitter, '<=', [1])) ? jitter : 0);
  }).prototype = manager._Backoff.prototype;
  dart.lazyFn(manager._Backoff['_#new#tearOff'], () => T.__To_Backoff());
  dart.addRtiResources(manager._Backoff, ["socket_io_client__src__manager|_Backoff"]);
  dart.setMethodSignature(manager._Backoff, () => dart.global.Object.setPrototypeOf({
    reset: _ti => T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(manager._Backoff))));
  dart.setMethodsImmediateTargetSignature(manager._Backoff, () => dart.global.Object.setPrototypeOf({reset: "package:socket_io_client/src/manager.dart:_Backoff"}, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(manager._Backoff))));
  dart.setGetterSignature(manager._Backoff, () => dart.global.Object.setPrototypeOf({
    [_jitter]: _ti => T.num(),
    duration: _ti => T.num()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(manager._Backoff))));
  dart.setSetterSignature(manager._Backoff, () => dart.global.Object.setPrototypeOf({
    [_jitter]: _ti => T.num(),
    min: _ti => T.dynamic(),
    max: _ti => T.dynamic(),
    jitter: _ti => T.dynamic()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(manager._Backoff))));
  dart.setLibraryUri(manager._Backoff, I[4]);
  dart.setFieldSignature(manager._Backoff, () => dart.global.Object.setPrototypeOf({
    [_ms]: {
      type: _ti => T.num(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_max]: {
      type: _ti => T.num(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [_factor]: {
      type: _ti => T.num(),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [___Backoff__jitter]: {
      type: _ti => T.numN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    attempts: {
      type: _ti => T.num(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(manager._Backoff))));
  dart.defineLazy(manager, {
    /*manager._logger*/get _logger() {
      return logger.Logger.new("socket_io_client:Manager");
    }
  });
  (function() {
  }).prototype = manager;
  http_client_adapter_factory.createPlatformHttpClientAdapter = function createPlatformHttpClientAdapter() {
    return html_http_client_adapter.makePlatformHttpClientAdapter();
  };
  dart.lazyFn(http_client_adapter_factory.createPlatformHttpClientAdapter, () => T.VoidToHttpClientAdapter());
  (function() {
  }).prototype = http_client_adapter_factory;
  html_http_client_adapter.HtmlHttpClientAdapter = class HtmlHttpClientAdapter extends core.Object {
    connect(uri, opts) {
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.Future.value(T.FutureOfJSObject(), T.JSObject$1()[_as](new dart.global.WebSocket(uri)));
    }
    static ['_#new#tearOff']() {
      return new html_http_client_adapter.HtmlHttpClientAdapter.new();
    }
  };
  (html_http_client_adapter.HtmlHttpClientAdapter.new = function() {
    ;
  }).prototype = html_http_client_adapter.HtmlHttpClientAdapter.prototype;
  dart.lazyFn(html_http_client_adapter.HtmlHttpClientAdapter['_#new#tearOff'], () => T.VoidToHtmlHttpClientAdapter());
  dart.addRtiResources(html_http_client_adapter.HtmlHttpClientAdapter, ["socket_io_client__src__engine__transport__html_http_client_adapter|HtmlHttpClientAdapter", "socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter"]);
  dart.setMethodSignature(html_http_client_adapter.HtmlHttpClientAdapter, () => dart.global.Object.setPrototypeOf({
    connect: _ti => T.String__ToFutureOfJSObject()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(html_http_client_adapter.HtmlHttpClientAdapter))));
  dart.setMethodsImmediateTargetSignature(html_http_client_adapter.HtmlHttpClientAdapter, () => dart.global.Object.setPrototypeOf({connect: "package:socket_io_client/src/engine/transport/html_http_client_adapter.dart:HtmlHttpClientAdapter"}, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(html_http_client_adapter.HtmlHttpClientAdapter))));
  dart.setLibraryUri(html_http_client_adapter.HtmlHttpClientAdapter, I[8]);
  html_http_client_adapter.makePlatformHttpClientAdapter = function makePlatformHttpClientAdapter() {
    return new html_http_client_adapter.HtmlHttpClientAdapter.new();
  };
  dart.lazyFn(html_http_client_adapter.makePlatformHttpClientAdapter, () => T.VoidToHttpClientAdapter());
  (function() {
  }).prototype = html_http_client_adapter;
  var id$ = dart.privateName(socket$, "Socket.id");
  var transport$ = dart.privateName(socket$, "Socket.transport");
  var binaryType = dart.privateName(socket$, "Socket.binaryType");
  var readyState$ = dart.privateName(socket$, "Socket.readyState");
  var writeBuffer = dart.privateName(socket$, "Socket.writeBuffer");
  var prevBufferLen = dart.privateName(socket$, "Socket.prevBufferLen");
  var upgrades = dart.privateName(socket$, "Socket.upgrades");
  var pingInterval = dart.privateName(socket$, "Socket.pingInterval");
  var pingTimeout = dart.privateName(socket$, "Socket.pingTimeout");
  var pingTimeoutTimer = dart.privateName(socket$, "Socket.pingTimeoutTimer");
  var upgrading = dart.privateName(socket$, "Socket.upgrading");
  var maxPayload = dart.privateName(socket$, "Socket.maxPayload");
  var port = dart.privateName(socket$, "Socket.port");
  var __Socket_opts = dart.privateName(socket$, "_#Socket#opts");
  var __Socket_secure = dart.privateName(socket$, "_#Socket#secure");
  var __Socket_hostname = dart.privateName(socket$, "_#Socket#hostname");
  var __Socket_transports = dart.privateName(socket$, "_#Socket#transports");
  var _byteLength = dart.privateName(socket$, "_byteLength");
  var _utf8Length = dart.privateName(socket$, "_utf8Length");
  socket$.Socket = class Socket extends event_emitter.EventEmitter {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get transport() {
      return this[transport$];
    }
    set transport(value) {
      this[transport$] = value;
    }
    get binaryType() {
      return this[binaryType];
    }
    set binaryType(value) {
      this[binaryType] = value;
    }
    get readyState() {
      return this[readyState$];
    }
    set readyState(value) {
      this[readyState$] = value;
    }
    get writeBuffer() {
      return this[writeBuffer];
    }
    set writeBuffer(value) {
      this[writeBuffer] = value;
    }
    get prevBufferLen() {
      return this[prevBufferLen];
    }
    set prevBufferLen(value) {
      this[prevBufferLen] = value;
    }
    get upgrades() {
      return this[upgrades];
    }
    set upgrades(value) {
      this[upgrades] = value;
    }
    get pingInterval() {
      return this[pingInterval];
    }
    set pingInterval(value) {
      this[pingInterval] = value;
    }
    get pingTimeout() {
      return this[pingTimeout];
    }
    set pingTimeout(value) {
      this[pingTimeout] = value;
    }
    get pingTimeoutTimer() {
      return this[pingTimeoutTimer];
    }
    set pingTimeoutTimer(value) {
      this[pingTimeoutTimer] = value;
    }
    get upgrading() {
      return this[upgrading];
    }
    set upgrading(value) {
      this[upgrading] = value;
    }
    get maxPayload() {
      return this[maxPayload];
    }
    set maxPayload(value) {
      this[maxPayload] = value;
    }
    get port() {
      return this[port];
    }
    set port(value) {
      this[port] = value;
    }
    get opts() {
      let t$3629;
      t$3629 = this[__Socket_opts];
      return t$3629 == null ? dart.throw(new _internal.LateError.fieldNI("opts")) : t$3629;
    }
    set opts(opts$35param) {
      this[__Socket_opts] = opts$35param;
    }
    get secure() {
      let t$3629;
      t$3629 = this[__Socket_secure];
      return t$3629 == null ? dart.throw(new _internal.LateError.fieldNI("secure")) : t$3629;
    }
    set secure(secure$35param) {
      this[__Socket_secure] = secure$35param;
    }
    get hostname() {
      let t$3629;
      t$3629 = this[__Socket_hostname];
      return t$3629 == null ? dart.throw(new _internal.LateError.fieldNI("hostname")) : t$3629;
    }
    set hostname(hostname$35param) {
      this[__Socket_hostname] = hostname$35param;
    }
    get transports() {
      let t$3629;
      t$3629 = this[__Socket_transports];
      return t$3629 == null ? dart.throw(new _internal.LateError.fieldNI("transports")) : t$3629;
    }
    set transports(transports$35param) {
      this[__Socket_transports] = transports$35param;
    }
    static ['_#new#tearOff'](uri, opts) {
      return new socket$.Socket.new(uri, opts);
    }
    createTransport(name, options = null) {
      let t$3629, t$3629$;
      socket$._logger.fine("creating transport \"" + dart.str(name) + "\"");
      let query = collection.LinkedHashMap.from(T.LinkedHashMapOfString$dynamic(), T.Map()[_as]((t$3629 = this.opts[$_get]("query"), t$3629 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3629)));
      query[$_set]("EIO", parser.protocol);
      query[$_set]("transport", name);
      if (this.id != null) query[$_set]("sid", this.id);
      let transportOptions = (t$3629$ = dart.dsend(this.opts[$_get]("transportOptions"), '_get', [name]), t$3629$ == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3629$);
      let opts = (() => {
        let t$3629 = collection.LinkedHashMap.of(T.LinkedHashMap(), this.opts);
        t$3629[$_set]("query", query);
        t$3629[$_set]("socket", this);
        t$3629[$_set]("hostname", this.hostname);
        t$3629[$_set]("secure", this.secure);
        t$3629[$_set]("port", this.port);
        t$3629[$addAll](T.Map()[_as](transportOptions));
        return t$3629;
      })();
      return transports.Transports.newInstance(dart_rti._asString(name), opts);
    }
    open() {
      let transport = null;
      if (this.opts[$_get]("rememberUpgrade") != null && socket$.Socket.priorWebsocketSuccess && this.transports[$contains]("websocket")) {
        transport = "websocket";
      } else if (this.transports[$isEmpty]) {
        async.Timer.run(dart.fn(() => this.emitReserved("error", "No transports available"), T.VoidTovoid()));
        return;
      } else {
        transport = this.transports[$_get](0);
      }
      this.readyState = "opening";
      try {
        transport = this.createTransport(transport);
      } catch (t$36$35e) {
        let e = dart.getThrown(t$36$35e);
        if (T.Object()[_is](e)) {
          socket$._logger.fine("error while creating transport: " + dart.str(e));
          this.transports[$removeAt](0);
          this.open();
          return;
        } else
          throw t$36$35e;
      }
      dart.dsend(transport, 'open', []);
      this.setTransport(transport);
    }
    setTransport(transport) {
      let t$3631, t$3631$;
      socket$._logger.fine("setting transport " + dart.str((t$3631 = transport, t$3631 == null ? null : dart.dload(t$3631, 'name'))));
      if (this.transport != null) {
        socket$._logger.fine("clearing existing transport " + dart.str(dart.nullCheck(this.transport).name));
        dart.nullCheck(this.transport).clearListeners();
      }
      this.transport = T.TransportN()[_as](transport);
      t$3631$ = transport;
      (() => {
        dart.dsend(t$3631$, 'on', ["drain", dart.fn(_ => this.onDrain(), T.dynamicTovoid$1())]);
        dart.dsend(t$3631$, 'on', ["packet", dart.fn(packet => this.onPacket(T.Map()[_as](packet)), T.dynamicTovoid$1())]);
        dart.dsend(t$3631$, 'on', ["error", dart.fn(e => this.onError(e), T.dynamicTovoid$1())]);
        dart.dsend(t$3631$, 'on', ["close", dart.fn(reason => this.onClose("transport close", reason), T.dynamicTovoid$1())]);
        return t$3631$;
      })();
    }
    probe(name) {
      socket$._logger.fine("probing transport \"" + dart.str(name) + "\"");
      let transport = this.createTransport(name, new _js_helper.IdentityMap.from(T.IdentityMapOfString$bool(), ["probe", true]));
      let failed = false;
      let cleanup = null;
      socket$.Socket.priorWebsocketSuccess = false;
      const onTransportOpen = _ => {
        if (failed) return;
        socket$._logger.fine("probe transport \"" + dart.str(name) + "\" opened");
        dart.nullCheck(transport).send([new _js_helper.IdentityMap.from(T.IdentityMapOfString$String(), ["type", "ping", "data", "probe"])]);
        dart.nullCheck(transport).once("packet", dart.fn(msg => {
          let t$3631, t$3631$;
          if (failed) return;
          if ("pong" === dart.dsend(msg, '_get', ["type"]) && "probe" === dart.dsend(msg, '_get', ["data"])) {
            socket$._logger.fine("probe transport \"" + dart.str(name) + "\" pong");
            this.upgrading = true;
            this.emitReserved("upgrading", transport);
            if (transport == null) return;
            socket$.Socket.priorWebsocketSuccess = "websocket" === dart.nullCheck(transport).name;
            socket$._logger.fine("pausing current transport \"" + dart.str((t$3631 = transport, t$3631 == null ? null : t$3631.name)) + "\"");
            t$3631$ = this.transport;
            t$3631$ == null ? null : t$3631$.pause(dart.fn(() => {
              if (failed) return;
              if ("closed" === this.readyState) return;
              socket$._logger.fine("changing transport and sending upgrade packet");
              dart.dcall(cleanup, []);
              this.setTransport(transport);
              dart.nullCheck(transport).send([new _js_helper.IdentityMap.from(T.IdentityMapOfString$String(), ["type", "upgrade"])]);
              this.emit("upgrade", transport);
              transport = null;
              this.upgrading = false;
              this.flush();
            }, T.VoidToNull()));
          } else {
            socket$._logger.fine("probe transport \"" + dart.str(name) + "\" failed");
            this.emitReserved("upgradeError", new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["error", "probe error", "transport", dart.nullCheck(transport).name]));
          }
        }, T.dynamicToNull()));
      };
      dart.fn(onTransportOpen, T.dynamicToNull());
      function freezeTransport() {
        if (failed) return;
        failed = true;
        dart.dcall(cleanup, []);
        dart.nullCheck(transport).close();
        transport = null;
      }
      dart.fn(freezeTransport, T.VoidToNull());
      const onerror = err => {
        let oldTransport = transport;
        freezeTransport();
        socket$._logger.fine("probe transport \"" + dart.str(name) + "\" failed because of error: " + dart.str(err));
        this.emitReserved("upgradeError", new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["error", "probe error: " + dart.str(err), "transport", dart.nullCheck(oldTransport).name]));
      };
      dart.fn(onerror, T.dynamicToNull());
      function onTransportClose(_) {
        return onerror("transport closed");
      }
      dart.fn(onTransportClose, T.dynamicToNull());
      function onclose(_) {
        return onerror("socket closed");
      }
      dart.fn(onclose, T.dynamicToNull());
      function onupgrade(to) {
        let t$3631, t$3631$;
        if (transport != null && !dart.equals(dart.dload(to, 'name'), dart.nullCheck(transport).name)) {
          socket$._logger.fine("\"" + dart.str((t$3631 = to, t$3631 == null ? null : dart.dload(t$3631, 'name'))) + "\" works - aborting \"" + dart.str((t$3631$ = transport, t$3631$ == null ? null : t$3631$.name)) + "\"");
          freezeTransport();
        }
      }
      dart.fn(onupgrade, T.dynamicToNull());
      cleanup = dart.fn(() => {
        dart.nullCheck(transport).off("open", onTransportOpen);
        dart.nullCheck(transport).off("error", onerror);
        dart.nullCheck(transport).off("close", onTransportClose);
        this.off("close", onclose);
        this.off("upgrading", onupgrade);
      }, T.VoidToNull());
      dart.nullCheck(transport).once("open", onTransportOpen);
      dart.nullCheck(transport).once("error", onerror);
      dart.nullCheck(transport).once("close", onTransportClose);
      this.once("close", onclose);
      this.once("upgrading", onupgrade);
      if (dart.nullCheck(this.upgrades)[$contains]("webtransport") && !dart.equals(name, "webtransport")) {
        async.Timer.new(new core.Duration.new({milliseconds: 200}), dart.fn(() => {
          if (!failed) {
            dart.nullCheck(transport).open();
          }
        }, T.VoidTovoid()));
      } else {
        dart.nullCheck(transport).open();
      }
    }
    onOpen() {
      let t$3631;
      socket$._logger.fine("socket open");
      this.readyState = "open";
      socket$.Socket.priorWebsocketSuccess = "websocket" === dart.nullCheck(this.transport).name;
      this.emitReserved("open");
      this.flush();
      if ("open" === this.readyState && dart.equals(this.opts[$_get]("upgrade"), true) && dart.equals((t$3631 = this.transport, t$3631 == null ? null : t$3631.name), "polling")) {
        socket$._logger.fine("starting upgrade probes");
        for (let i = 0, l = dart.nullCheck(this.upgrades)[$length]; i < l; i = i + 1) {
          this.probe(dart.nullCheck(this.upgrades)[$_get](i));
        }
      }
    }
    onPacket(packet) {
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        let type = packet[$_get]("type");
        let data = packet[$_get]("data");
        socket$._logger.fine("socket receive: type \"" + dart.str(type) + "\", data \"" + dart.str(data) + "\"");
        this.emitReserved("packet", packet);
        this.emitReserved("heartbeat");
        this.resetPingTimeout();
        switch (type) {
          case "open":
            {
              this.onHandshake(T.Map()[_as](convert.json.decode(dart_rti._asString(data))));
              break;
            }
          case "ping":
            {
              this.sendPacket({type: "pong"});
              this.emitReserved("ping");
              this.emitReserved("pong");
              break;
            }
          case "error":
            {
              this.onError(new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["error", "server error", "code", data]));
              break;
            }
          case "message":
            {
              this.emitReserved("data", data);
              this.emitReserved("message", data);
              break;
            }
        }
      } else {
        socket$._logger.fine("packet received with socket readyState \"" + this.readyState + "\"");
      }
    }
    onHandshake(data) {
      this.emitReserved("handshake", data);
      this.id = dart_rti._asStringQ(data[$_get]("sid"));
      dart.nullCheck(dart.nullCheck(this.transport).query)[$_set]("sid", data[$_get]("sid"));
      this.upgrades = this.filterUpgrades(T.List()[_as](data[$_get]("upgrades")));
      this.pingInterval = dart_rti._asIntQ(data[$_get]("pingInterval"));
      this.pingTimeout = dart_rti._asIntQ(data[$_get]("pingTimeout"));
      this.maxPayload = dart_rti._asIntQ(data[$_get]("maxPayload"));
      this.onOpen();
      if ("closed" === this.readyState) return;
      this.resetPingTimeout();
    }
    resetPingTimeout() {
      let t$3631;
      t$3631 = this.pingTimeoutTimer;
      t$3631 == null ? null : t$3631.cancel();
      this.pingTimeoutTimer = async.Timer.new(new core.Duration.new({milliseconds: this.pingInterval != null && this.pingTimeout != null ? dart.nullCheck(this.pingInterval) + dart.nullCheck(this.pingTimeout) : 0}), dart.fn(() => {
        this.onClose("ping timeout");
      }, T.VoidTovoid()));
    }
    onDrain() {
      this.writeBuffer[$removeRange](0, this.prevBufferLen);
      this.prevBufferLen = 0;
      if (this.writeBuffer[$isEmpty]) {
        this.emitReserved("drain");
      } else {
        this.flush();
      }
    }
    flush() {
      if ("closed" !== this.readyState && dart.nullCheck(this.transport).writable === true && this.upgrading !== true && this.writeBuffer[$isNotEmpty]) {
        let packets = this.getWritablePackets();
        socket$._logger.fine("flushing " + dart.strSafe(packets[$length]) + " packets in socket");
        dart.nullCheck(this.transport).send(packets);
        this.prevBufferLen = this.writeBuffer[$length];
        this.emit("flush");
      }
    }
    getWritablePackets() {
      let t$3631;
      let shouldCheckPayloadSize = this.maxPayload != null && dart.equals((t$3631 = this.transport, t$3631 == null ? null : t$3631.name), "polling") && this.writeBuffer[$length] > 1;
      if (!shouldCheckPayloadSize) {
        return this.writeBuffer;
      }
      let payloadSize = 1;
      let writablePackets = _interceptors.JSArray.of(T.JSArrayOfMapOfString$dynamic(), []);
      for (let i = 0; i < this.writeBuffer[$length]; i = i + 1) {
        let data = dart.dsend(this.writeBuffer[$_get](i), '_get', ["data"]);
        if (data != null) {
          payloadSize = payloadSize + this[_byteLength](data);
        }
        if (i > 0 && payloadSize > dart.nullCheck(this.maxPayload)) {
          socket$._logger.fine("only send " + dart.strSafe(i) + " out of " + dart.strSafe(this.writeBuffer[$length]) + " packets");
          return writablePackets;
        }
        payloadSize = payloadSize + 2;
        writablePackets[$add](T.MapOfString$dynamic()[_as](this.writeBuffer[$_get](i)));
      }
      socket$._logger.fine("payload size is " + dart.strSafe(payloadSize) + " (max: " + dart.str(this.maxPayload) + ")");
      return writablePackets;
    }
    [_byteLength](obj) {
      if (typeof obj == 'string') {
        return this[_utf8Length](obj);
      }
      return (T.ByteBuffer()[_as](obj)[$lengthInBytes] * 1.33)[$ceil]();
    }
    [_utf8Length](str) {
      let length = 0;
      for (let i = 0; i < str.length; i = i + 1) {
        let c = str[$codeUnitAt](i);
        if (c < 128) {
          length = length + 1;
        } else if (c < 2048) {
          length = length + 2;
        } else if (c < 55296 || c >= 57344) {
          length = length + 3;
        } else {
          i = i + 1;
          length = length + 4;
        }
      }
      return length;
    }
    write(msg, options, fn = null) {
      return this.send(msg, options, fn);
    }
    send(msg, options, fn = null) {
      this.sendPacket({type: "message", data: msg, options: options, callback: fn});
      return this;
    }
    sendPacket(opts) {
      let t$3631;
      let type = opts && 'type' in opts ? opts.type : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      if ("closing" === this.readyState || "closed" === this.readyState) {
        return;
      }
      options = (t$3631 = options, t$3631 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3631);
      dart.dsend(options, '_set', ["compress", false !== dart.dsend(options, '_get', ["compress"])]);
      let packet = new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["type", type, "data", data, "options", options]);
      this.emitReserved("packetCreate", packet);
      this.writeBuffer[$add](packet);
      if (callback != null) this.once("flush", callback);
      this.flush();
    }
    close() {
      const close = () => {
        this.onClose("forced close");
        socket$._logger.fine("socket closing - telling transport to close");
        dart.nullCheck(this.transport).close();
      };
      dart.fn(close, T.VoidToNull());
      let temp = null;
      const cleanupAndClose = _ => {
        this.off("upgrade", T.dynamicToNdynamic()[_as](temp));
        this.off("upgradeError", T.dynamicToNdynamic()[_as](temp));
        close();
      };
      dart.fn(cleanupAndClose, T.dynamicToNull());
      temp = cleanupAndClose;
      const waitForUpgrade = () => {
        this.once("upgrade", cleanupAndClose);
        this.once("upgradeError", cleanupAndClose);
      };
      dart.fn(waitForUpgrade, T.VoidToNull());
      if ("opening" === this.readyState || "open" === this.readyState) {
        this.readyState = "closing";
        if (this.writeBuffer[$isNotEmpty]) {
          this.once("drain", dart.fn(_ => {
            if (this.upgrading === true) {
              waitForUpgrade();
            } else {
              close();
            }
          }, T.dynamicToNull()));
        } else if (this.upgrading === true) {
          waitForUpgrade();
        } else {
          close();
        }
      }
      return this;
    }
    onError(err) {
      socket$._logger.fine("socket error " + dart.str(err));
      socket$.Socket.priorWebsocketSuccess = false;
      this.emitReserved("error", err);
      this.onClose("transport error", err);
    }
    onClose(reason, desc = null) {
      let t$3631;
      if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
        socket$._logger.fine("socket close with reason: \"" + dart.str(reason) + "\"");
        t$3631 = this.pingTimeoutTimer;
        t$3631 == null ? null : t$3631.cancel();
        dart.nullCheck(this.transport).off("close");
        dart.nullCheck(this.transport).close();
        dart.nullCheck(this.transport).clearListeners();
        this.readyState = "closed";
        this.id = null;
        this.emitReserved("close", new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["reason", reason, "desc", desc]));
        this.writeBuffer = [];
        this.prevBufferLen = 0;
      }
    }
    filterUpgrades(upgrades) {
      return this.transports[$where](dart.fn(transport => upgrades[$contains](transport), T.StringTobool()))[$toList]();
    }
  };
  (socket$.Socket.new = function(uri, opts) {
    let t$3628, t$3628$, t$3628$0;
    this[id$] = null;
    this[transport$] = null;
    this[binaryType] = "arraybuffer";
    this[readyState$] = "";
    this[writeBuffer] = [];
    this[prevBufferLen] = 0;
    this[upgrades] = null;
    this[pingInterval] = null;
    this[pingTimeout] = null;
    this[pingTimeoutTimer] = null;
    this[upgrading] = null;
    this[maxPayload] = null;
    this[__Socket_opts] = null;
    this[__Socket_secure] = null;
    this[__Socket_hostname] = null;
    this[port] = null;
    this[__Socket_transports] = null;
    dart.global.Object.getPrototypeOf(socket$.Socket).new.call(this);
    opts = (t$3628 = opts, t$3628 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3628);
    if (uri[$isNotEmpty]) {
      let uri0 = core.Uri.parse(uri);
      opts[$_set]("hostname", uri0.host);
      opts[$_set]("secure", uri0.scheme === "https" || uri0.scheme === "wss");
      opts[$_set]("port", uri0.port);
      if (uri0.hasQuery) opts[$_set]("query", uri0.query);
    } else if (opts[$containsKey]("host")) {
      opts[$_set]("hostname", core.Uri.parse(dart_rti._asString(opts[$_get]("host"))).host);
    }
    this.secure = dart_rti._asBool((t$3628$ = opts[$_get]("secure"), t$3628$ == null ? false : t$3628$));
    if (opts[$_get]("hostname") != null && !opts[$containsKey]("port")) {
      opts[$_set]("port", this.secure ? "443" : "80");
    }
    this.hostname = dart_rti._asString(opts[$_get]("hostname"));
    this.port = dart_rti._asIntQ(opts[$_get]("port"));
    this.transports = T.ListOfString()[_as]((t$3628$0 = opts[$_get]("transports"), t$3628$0 == null ? _interceptors.JSArray.of(T.JSArrayOfString(), ["polling", "websocket", "webtransport"]) : t$3628$0));
    this.writeBuffer = [];
    this.prevBufferLen = 0;
    this.opts = (() => {
      let t$3628 = new _js_helper.LinkedMap.new(T.LinkedMap());
      t$3628[$_set]("path", "/engine.io");
      t$3628[$_set]("agent", false);
      t$3628[$_set]("withCredentials", false);
      t$3628[$_set]("upgrade", true);
      t$3628[$_set]("timestampParam", "t");
      t$3628[$_set]("rememberUpgrade", false);
      t$3628[$_set]("addTrailingSlash", true);
      t$3628[$_set]("rejectUnauthorized", true);
      t$3628[$_set]("perMessageDeflate", new _js_helper.IdentityMap.from(T.IdentityMapOfString$int(), ["threshold", 1024]));
      t$3628[$_set]("transportOptions", new _js_helper.LinkedMap.new(T.LinkedMap()));
      t$3628[$_set]("closeOnBeforeunload", false);
      t$3628[$addAll](opts);
      return t$3628;
    })();
    this.opts[$_set]("path", dart.toString(this.opts[$_get]("path"))[$replaceFirst](core.RegExp.new("/$"), "") + (dart.dtest(this.opts[$_get]("addTrailingSlash")) ? "/" : ""));
    if (typeof opts[$_get]("query") == 'string') {
      this.opts[$_set]("query", parseqs.decode(opts[$_get]("query")));
    }
    this.id = null;
    this.upgrades = null;
    this.pingInterval = null;
    this.pingTimeout = null;
    this.pingTimeoutTimer = null;
    this.open();
  }).prototype = socket$.Socket.prototype;
  dart.lazyFn(socket$.Socket['_#new#tearOff'], () => T.StringAndMapNToSocket());
  dart.addRtiResources(socket$.Socket, ["socket_io_client__src__engine__socket|Socket"]);
  dart.setMethodSignature(socket$.Socket, () => dart.global.Object.setPrototypeOf({
    createTransport: _ti => T.dynamicAnddynamicToTransport(),
    open: _ti => T.VoidTovoid(),
    setTransport: _ti => T.dynamicTovoid$1(),
    probe: _ti => T.dynamicTovoid$1(),
    onOpen: _ti => T.VoidTovoid(),
    onPacket: _ti => T.MapTovoid(),
    onHandshake: _ti => T.MapTovoid(),
    resetPingTimeout: _ti => T.VoidTovoid(),
    onDrain: _ti => T.VoidTovoid(),
    flush: _ti => T.VoidTovoid(),
    getWritablePackets: _ti => T.VoidToList(),
    [_byteLength]: _ti => T.dynamicToint(),
    [_utf8Length]: _ti => T.StringToint(),
    write: _ti => T.dynamicAnddynamicAndFnToSocket(),
    send: _ti => T.dynamicAnddynamicAndFnToSocket(),
    sendPacket: _ti => T.__Tovoid(),
    close: _ti => T.VoidToSocket$1(),
    onError: _ti => T.dynamicTovoid$1(),
    onClose: _ti => T.dynamicAnddynamicTovoid$1(),
    filterUpgrades: _ti => T.ListToList()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(socket$.Socket))));
  dart.setMethodsImmediateTargetSignature(socket$.Socket, () => dart.global.Object.setPrototypeOf({
    createTransport: "package:socket_io_client/src/engine/socket.dart:Socket",
    open: "package:socket_io_client/src/engine/socket.dart:Socket",
    setTransport: "package:socket_io_client/src/engine/socket.dart:Socket",
    probe: "package:socket_io_client/src/engine/socket.dart:Socket",
    onOpen: "package:socket_io_client/src/engine/socket.dart:Socket",
    onPacket: "package:socket_io_client/src/engine/socket.dart:Socket",
    onHandshake: "package:socket_io_client/src/engine/socket.dart:Socket",
    resetPingTimeout: "package:socket_io_client/src/engine/socket.dart:Socket",
    onDrain: "package:socket_io_client/src/engine/socket.dart:Socket",
    flush: "package:socket_io_client/src/engine/socket.dart:Socket",
    getWritablePackets: "package:socket_io_client/src/engine/socket.dart:Socket",
    [_byteLength]: "package:socket_io_client/src/engine/socket.dart:Socket",
    [_utf8Length]: "package:socket_io_client/src/engine/socket.dart:Socket",
    write: "package:socket_io_client/src/engine/socket.dart:Socket",
    send: "package:socket_io_client/src/engine/socket.dart:Socket",
    sendPacket: "package:socket_io_client/src/engine/socket.dart:Socket",
    close: "package:socket_io_client/src/engine/socket.dart:Socket",
    onError: "package:socket_io_client/src/engine/socket.dart:Socket",
    onClose: "package:socket_io_client/src/engine/socket.dart:Socket",
    filterUpgrades: "package:socket_io_client/src/engine/socket.dart:Socket"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(socket$.Socket))));
  dart.setGetterSignature(socket$.Socket, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map(),
    secure: _ti => T.bool(),
    hostname: _ti => T.String(),
    transports: _ti => T.ListOfString()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(socket$.Socket))));
  dart.setSetterSignature(socket$.Socket, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map(),
    secure: _ti => T.bool(),
    hostname: _ti => T.String(),
    transports: _ti => T.ListOfString()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(socket$.Socket))));
  dart.setLibraryUri(socket$.Socket, I[6]);
  dart.setFieldSignature(socket$.Socket, () => dart.global.Object.setPrototypeOf({
    id: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    transport: {
      type: _ti => T.TransportN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[9]
    },
    binaryType: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    readyState: {
      type: _ti => T.String(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    writeBuffer: {
      type: _ti => T.List(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    prevBufferLen: {
      type: _ti => T.int(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    upgrades: {
      type: _ti => T.ListN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    pingInterval: {
      type: _ti => T.intN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    pingTimeout: {
      type: _ti => T.intN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    pingTimeoutTimer: {
      type: _ti => T.TimerN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[10]
    },
    upgrading: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    maxPayload: {
      type: _ti => T.intN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Socket_opts]: {
      type: _ti => T.MapN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Socket_secure]: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Socket_hostname]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    port: {
      type: _ti => T.intN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Socket_transports]: {
      type: _ti => T.ListNOfString(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(socket$.Socket))));
  dart.setStaticFieldSignature(socket$.Socket, () => ['priorWebsocketSuccess', 'protocol']);
  dart.defineLazy(socket$.Socket, {
    /*socket$.Socket.priorWebsocketSuccess*/get priorWebsocketSuccess() {
      return false;
    },
    set priorWebsocketSuccess(value) {},
    /*socket$.Socket.protocol*/get protocol() {
      return parser.protocol;
    },
    set protocol(value) {}
  });
  dart.defineLazy(socket$, {
    /*socket$._logger*/get _logger() {
      return logger.Logger.new("socket_io_client:engine.Socket");
    }
  });
  (function() {
  }).prototype = socket$;
  transports.Transports = class Transports extends core.Object {
    static upgradesTo(from) {
      if ("polling" === from) {
        return _interceptors.JSArray.of(T.JSArrayOfString(), ["websocket"]);
      }
      return _interceptors.JSArray.of(T.JSArrayOfString(), []);
    }
    static newInstance(name, options) {
      if ("websocket" === name) {
        return new websocket_transport.WebSocketTransport.new(T.Map()[_as](options));
      } else if ("polling" === name) {
        return new polling_transport.PollingTransport.new(T.Map()[_as](options));
      } else {
        dart.throw(new core.UnsupportedError.new("Unknown transport " + name));
      }
    }
    static ['_#new#tearOff']() {
      return new transports.Transports.new();
    }
  };
  (transports.Transports.new = function() {
    ;
  }).prototype = transports.Transports.prototype;
  dart.lazyFn(transports.Transports.upgradesTo, () => T.StringToListOfString());
  dart.lazyFn(transports.Transports.newInstance, () => T.StringAnddynamicToTransport());
  dart.lazyFn(transports.Transports['_#new#tearOff'], () => T.VoidToTransports());
  dart.addRtiResources(transports.Transports, ["socket_io_client__src__engine__transport__transports|Transports"]);
  dart.setMethodsImmediateTargetSignature(transports.Transports, () => dart.global.Object.setPrototypeOf({
    upgradesTo: "package:socket_io_client/src/engine/transport/transports.dart:Transports",
    newInstance: "package:socket_io_client/src/engine/transport/transports.dart:Transports"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(transports.Transports))));
  dart.setStaticMethodSignature(transports.Transports, () => ['upgradesTo', 'newInstance']);
  dart.setLibraryUri(transports.Transports, I[11]);
  (function() {
  }).prototype = transports;
  var name = dart.privateName(websocket_transport, "WebSocketTransport.name");
  var ws = dart.privateName(websocket_transport, "WebSocketTransport.ws");
  var query$ = dart.privateName(transport, "Transport.query");
  var writable = dart.privateName(transport, "Transport.writable");
  var supportsBinary = dart.privateName(transport, "Transport.supportsBinary");
  var readyState$0 = dart.privateName(transport, "Transport.readyState");
  var socket$0 = dart.privateName(transport, "Transport.socket");
  var __Transport_opts = dart.privateName(transport, "_#Transport#opts");
  var _hostname = dart.privateName(transport, "_hostname");
  var _port = dart.privateName(transport, "_port");
  var _query = dart.privateName(transport, "_query");
  transport.Transport = class Transport extends event_emitter.EventEmitter {
    get query() {
      return this[query$];
    }
    set query(value) {
      this[query$] = value;
    }
    get writable() {
      return this[writable];
    }
    set writable(value) {
      this[writable] = value;
    }
    get supportsBinary() {
      return this[supportsBinary];
    }
    set supportsBinary(value) {
      this[supportsBinary] = value;
    }
    get readyState() {
      return this[readyState$0];
    }
    set readyState(value) {
      this[readyState$0] = value;
    }
    get socket() {
      return this[socket$0];
    }
    set socket(value) {
      this[socket$0] = value;
    }
    get opts() {
      let t$3633;
      t$3633 = this[__Transport_opts];
      return t$3633 == null ? dart.throw(new _internal.LateError.fieldNI("opts")) : t$3633;
    }
    set opts(opts$35param) {
      this[__Transport_opts] = opts$35param;
    }
    onError(msg, desc = null) {
      super.emitReserved("error", new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["msg", msg, "desc", desc, "type", "TransportError"]));
      return this;
    }
    open() {
      this.readyState = "opening";
      this.doOpen();
      return this;
    }
    close() {
      if ("opening" === this.readyState || "open" === this.readyState) {
        this.doClose();
        this.onClose();
      }
      return this;
    }
    send(packets) {
      if ("open" === this.readyState) {
        this.write(packets);
      } else {
        transport.Transport._logger.fine("transport is not open, discarding packets");
      }
    }
    onOpen() {
      this.readyState = "open";
      this.writable = true;
      this.emitReserved("open");
    }
    onData(data) {
      let packet = parser.PacketParser.decodePacket(data, dart.nullCheck(this.socket).binaryType);
      this.onPacket(packet);
    }
    onPacket(packet) {
      this.emitReserved("packet", packet);
    }
    onClose(details = null) {
      this.readyState = "closed";
      this.emitReserved("close", details);
    }
    pause(onPause) {
    }
    createUri(schema, query) {
      return schema + "://" + this[_hostname]() + this[_port]() + dart.str(this.opts[$_get]("path")) + this[_query](query);
    }
    [_hostname]() {
      let hostname = dart_rti._asString(this.opts[$_get]("hostname"));
      return hostname[$contains](":") ? "[" + hostname + "]" : hostname;
    }
    [_port]() {
      let port = this.opts[$_get]("port");
      if (port != null && (dart.equals(this.opts[$_get]("secure"), true) && !dart.equals(port, 443) || !dart.equals(this.opts[$_get]("secure"), true) && !dart.equals(port, 80))) {
        return ":" + dart.str(port);
      } else {
        return "";
      }
    }
    [_query](query) {
      let result = new _js_helper.IdentityMap.new(T.IdentityMapOfString$String());
      query[$forEach](dart.fn((key, value) => {
        if (typeof value == 'string') {
          result[$_set](key, value);
        } else {
          result[$_set](key, convert.jsonEncode(value));
        }
      }, T.StringAnddynamicTovoid()));
      let queryString = core._Uri.new({queryParameters: result}).query;
      return queryString[$isNotEmpty] ? "?" + queryString : "";
    }
  };
  (transport.Transport.new = function(opts) {
    this[query$] = null;
    this[writable] = null;
    this[__Transport_opts] = null;
    this[supportsBinary] = null;
    this[readyState$0] = null;
    this[socket$0] = null;
    this[__Transport_opts] = opts;
    dart.global.Object.getPrototypeOf(transport.Transport).new.call(this);
    this.query = T.MapNOfString$dynamic()[_as](this.opts[$_get]("query"));
    this.readyState = "";
    this.socket = T.SocketN()[_as](this.opts[$_get]("socket"));
  }).prototype = transport.Transport.prototype;
  dart.addRtiResources(transport.Transport, ["socket_io_client__src__engine__transport|Transport"]);
  dart.setMethodSignature(transport.Transport, () => dart.global.Object.setPrototypeOf({
    onError: _ti => T.dynamicAnddynamicTodynamic(),
    open: _ti => T.VoidTodynamic(),
    close: _ti => T.VoidTodynamic(),
    send: _ti => T.ListTovoid(),
    onOpen: _ti => T.VoidTovoid(),
    onData: _ti => T.dynamicTovoid$1(),
    onPacket: _ti => T.dynamicTovoid$1(),
    onClose: _ti => T.dynamicTovoid(),
    pause: _ti => T.FnTovoid(),
    createUri: _ti => T.StringAndMapOfString$dynamicToString(),
    [_hostname]: _ti => T.VoidToString(),
    [_port]: _ti => T.VoidToString(),
    [_query]: _ti => T.MapOfString$dynamicToString()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(transport.Transport))));
  dart.setMethodsImmediateTargetSignature(transport.Transport, () => dart.global.Object.setPrototypeOf({
    onError: "package:socket_io_client/src/engine/transport.dart:Transport",
    open: "package:socket_io_client/src/engine/transport.dart:Transport",
    close: "package:socket_io_client/src/engine/transport.dart:Transport",
    send: "package:socket_io_client/src/engine/transport.dart:Transport",
    onOpen: "package:socket_io_client/src/engine/transport.dart:Transport",
    onData: "package:socket_io_client/src/engine/transport.dart:Transport",
    onPacket: "package:socket_io_client/src/engine/transport.dart:Transport",
    onClose: "package:socket_io_client/src/engine/transport.dart:Transport",
    pause: "package:socket_io_client/src/engine/transport.dart:Transport",
    createUri: "package:socket_io_client/src/engine/transport.dart:Transport",
    [_hostname]: "package:socket_io_client/src/engine/transport.dart:Transport",
    [_port]: "package:socket_io_client/src/engine/transport.dart:Transport",
    [_query]: "package:socket_io_client/src/engine/transport.dart:Transport"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(transport.Transport))));
  dart.setGetterSignature(transport.Transport, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(transport.Transport))));
  dart.setSetterSignature(transport.Transport, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(transport.Transport))));
  dart.setLibraryUri(transport.Transport, I[9]);
  dart.setFieldSignature(transport.Transport, () => dart.global.Object.setPrototypeOf({
    query: {
      type: _ti => T.MapNOfString$dynamic(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    writable: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Transport_opts]: {
      type: _ti => T.MapN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    supportsBinary: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    readyState: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    socket: {
      type: _ti => T.SocketN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[6]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(transport.Transport))));
  dart.setStaticFieldSignature(transport.Transport, () => ['_logger']);
  dart.defineLazy(transport.Transport, {
    /*transport.Transport._logger*/get _logger() {
      return logger.Logger.new("socket_io_client:Transport");
    }
  });
  websocket_transport.WebSocketTransport = class WebSocketTransport extends transport.Transport {
    get name() {
      return this[name];
    }
    set name(value) {
      this[name] = value;
    }
    get ws() {
      return this[ws];
    }
    set ws(value) {
      this[ws] = value;
    }
    static ['_#new#tearOff'](opts) {
      return new websocket_transport.WebSocketTransport.new(opts);
    }
    doOpen() {
      let t$3632;
      let uri = this.uri();
      let protocols = this.opts[$_get]("protocols");
      if (this.opts[$containsKey]("extraHeaders")) {
        this.opts[$_set]("headers", this.opts[$_get]("extraHeaders"));
      }
      try {
        if (protocols == null) {
          this.ws = T.JSObject$1()[_as](new dart.global.WebSocket(uri));
        } else {
          this.ws = T.JSObject$1()[_as](new dart.global.WebSocket(uri, dart_rti._asObject(protocols)));
        }
      } catch (t$36$35e) {
        let err = dart.getThrown(t$36$35e);
        if (T.Object()[_is](err)) {
          return this.emitReserved("error", err);
        } else
          throw t$36$35e;
      }
      if ((t$3632 = this.ws, t$3632 == null ? null : js_util.getProperty(T.String(), t$3632, "binaryType")) == null) {
        this.supportsBinary = false;
      }
      dart.nullCheck(this.ws).binaryType = dart.nullCheck(this.socket).binaryType;
      this.addEventListeners();
    }
    addEventListeners() {
      let t$3632;
      t$3632 = dart.nullCheck(this.ws);
      (() => {
        events['WebSocketEvents|get#onOpen'](t$3632).listen(dart.fn(_ => this.onOpen(), T.JSObjectTovoid()));
        events['WebSocketEvents|get#onClose'](t$3632).listen(dart.fn(closeEvent => this.onClose(new _js_helper.IdentityMap.from(T.IdentityMapOfString$Object(), ["description", "websocket connection closed", "context", closeEvent])), T.JSObjectTovoid$1()));
        events['WebSocketEvents|get#onMessage'](t$3632).listen(dart.fn(evt => this.onData(js_util.getProperty(T.ObjectN(), evt, "data")), T.JSObjectTovoid$2()));
        events['WebSocketEvents|get#onError'](t$3632).listen(dart.fn(e => {
          this.onError("websocket error", e);
        }, T.JSObjectTovoid()));
        return t$3632;
      })();
    }
    write(packets) {
      this.writable = false;
      let total = packets[$length];
      for (let packet of packets) {
        parser.PacketParser.encodePacket(T.Map()[_as](packet), {supportsBinary: dart.nullCheck(this.supportsBinary), fromClient: true, callback: dart.fn(data => {
            try {
              if (typeof data == 'string') {
                dart.nullCheck(this.ws).send(js_interop['StringToJSString|get#toJS'](data));
              } else {
                dart.nullCheck(this.ws).send(dart_rti._asObject(data));
              }
            } catch (t$36$35e) {
              let e = dart.getThrown(t$36$35e);
              if (T.Object()[_is](e)) {
                websocket_transport.WebSocketTransport._logger.fine("websocket closed before onclose event");
              } else
                throw t$36$35e;
            }
            if ((total = total - 1) === 0) {
              async.Timer.run(dart.fn(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, T.VoidTovoid()));
            }
          }, T.dynamicToNull())});
      }
    }
    doClose() {
      let t$3633;
      t$3633 = this.ws;
      t$3633 == null ? null : t$3633.close();
      this.ws = null;
    }
    uri() {
      let t$3633;
      let query = (t$3633 = this.query, t$3633 == null ? new _js_helper.IdentityMap.new(T.IdentityMapOfString$dynamic()) : t$3633);
      let schema = dart.dtest(this.opts[$_get]("secure")) ? "wss" : "ws";
      if (dart.equals(this.opts[$_get]("timestampRequests"), true)) {
        query[$_set](dart_rti._asString(this.opts[$_get]("timestampParam")), new core.DateTime.now().millisecondsSinceEpoch[$toRadixString](36));
      }
      if (this.supportsBinary === false) {
        query[$_set]("b64", 1);
      }
      return this.createUri(schema, query);
    }
  };
  (websocket_transport.WebSocketTransport.new = function(opts) {
    let t$3631;
    this[name] = "websocket";
    this[ws] = null;
    dart.global.Object.getPrototypeOf(websocket_transport.WebSocketTransport).new.call(this, opts);
    let forceBase64 = (t$3631 = opts[$_get]("forceBase64"), t$3631 == null ? false : t$3631);
    this.supportsBinary = !dart.dtest(forceBase64);
  }).prototype = websocket_transport.WebSocketTransport.prototype;
  dart.lazyFn(websocket_transport.WebSocketTransport['_#new#tearOff'], () => T.MapToWebSocketTransport());
  dart.addRtiResources(websocket_transport.WebSocketTransport, ["socket_io_client__src__engine__transport__websocket_transport|WebSocketTransport"]);
  dart.setMethodSignature(websocket_transport.WebSocketTransport, () => dart.global.Object.setPrototypeOf({
    doOpen: _ti => T.VoidTovoid(),
    addEventListeners: _ti => T.VoidTovoid(),
    write: _ti => T.ListTovoid(),
    doClose: _ti => T.VoidTovoid(),
    uri: _ti => T.VoidToString()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(websocket_transport.WebSocketTransport))));
  dart.setMethodsImmediateTargetSignature(websocket_transport.WebSocketTransport, () => dart.global.Object.setPrototypeOf({
    doOpen: "package:socket_io_client/src/engine/transport/websocket_transport.dart:WebSocketTransport",
    addEventListeners: "package:socket_io_client/src/engine/transport/websocket_transport.dart:WebSocketTransport",
    write: "package:socket_io_client/src/engine/transport/websocket_transport.dart:WebSocketTransport",
    doClose: "package:socket_io_client/src/engine/transport/websocket_transport.dart:WebSocketTransport",
    uri: "package:socket_io_client/src/engine/transport/websocket_transport.dart:WebSocketTransport"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(websocket_transport.WebSocketTransport))));
  dart.setLibraryUri(websocket_transport.WebSocketTransport, I[13]);
  dart.setFieldSignature(websocket_transport.WebSocketTransport, () => dart.global.Object.setPrototypeOf({
    name: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    ws: {
      type: _ti => T.JSObjectN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[14]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(websocket_transport.WebSocketTransport))));
  dart.setStaticFieldSignature(websocket_transport.WebSocketTransport, () => ['_logger']);
  dart.defineLazy(websocket_transport.WebSocketTransport, {
    /*websocket_transport.WebSocketTransport._logger*/get _logger() {
      return logger.Logger.new("socket_io_client:transport.WebSocketTransport");
    }
  });
  (function() {
  }).prototype = websocket_transport;
  (function() {
  }).prototype = transport;
  var name$ = dart.privateName(polling_transport, "PollingTransport.name");
  var polling = dart.privateName(polling_transport, "PollingTransport.polling");
  var pollXhr = dart.privateName(polling_transport, "PollingTransport.pollXhr");
  var cookieJar = dart.privateName(polling_transport, "PollingTransport.cookieJar");
  var __PollingTransport_xd = dart.privateName(polling_transport, "_#PollingTransport#xd");
  polling_transport.PollingTransport = class PollingTransport extends transport.Transport {
    get name() {
      return this[name$];
    }
    set name(value) {
      this[name$] = value;
    }
    get polling() {
      return this[polling];
    }
    set polling(value) {
      this[polling] = value;
    }
    get pollXhr() {
      return this[pollXhr];
    }
    set pollXhr(value) {
      this[pollXhr] = value;
    }
    get cookieJar() {
      return this[cookieJar];
    }
    set cookieJar(value) {
      this[cookieJar] = value;
    }
    get xd() {
      let t$3633;
      t$3633 = this[__PollingTransport_xd];
      return t$3633 == null ? dart.throw(new _internal.LateError.fieldNI("xd")) : t$3633;
    }
    set xd(xd$35param) {
      this[__PollingTransport_xd] = xd$35param;
    }
    static ['_#new#tearOff'](opts) {
      return new polling_transport.PollingTransport.new(opts);
    }
    doOpen() {
      this.poll();
    }
    pause(onPause) {
      let self = this;
      this.readyState = "pausing";
      function pause() {
        polling_transport._logger.fine("paused");
        self.readyState = "paused";
        onPause();
      }
      dart.fn(pause, T.VoidToNull());
      if (this.polling === true || this.writable !== true) {
        let total = 0;
        if (this.polling === true) {
          polling_transport._logger.fine("we are currently polling - waiting to pause");
          total = total + 1;
          this.once("pollComplete", dart.fn(_ => {
            polling_transport._logger.fine("pre-pause polling complete");
            if ((total = total - 1) === 0) pause();
          }, T.dynamicToNull()));
        }
        if (this.writable !== true) {
          polling_transport._logger.fine("we are currently writing - waiting to pause");
          total = total + 1;
          this.once("drain", dart.fn(_ => {
            polling_transport._logger.fine("pre-pause writing complete");
            if ((total = total - 1) === 0) pause();
          }, T.dynamicToNull()));
        }
      } else {
        pause();
      }
    }
    poll() {
      polling_transport._logger.fine("polling");
      this.polling = true;
      this.doPoll();
      this.emitReserved("poll");
    }
    onData(data) {
      let self = this;
      polling_transport._logger.fine("polling got data " + dart.str(data));
      function callback(packet, index = null, total = null) {
        if ("opening" === self.readyState && dart.equals(dart.dsend(packet, '_get', ["type"]), "open")) {
          self.onOpen();
        }
        if ("close" === dart.dsend(packet, '_get', ["type"])) {
          self.onClose(new _js_helper.IdentityMap.from(T.IdentityMapOfString$String(), ["description", "transport closed by the server"]));
          return false;
        }
        self.onPacket(packet);
      }
      dart.fn(callback, T.dynamicAnddynamicAnddynamicToboolN());
      dart.dsend(parser.PacketParser.decodePayload(data, dart.nullCheck(this.socket).binaryType), 'forEach', [callback]);
      if ("closed" !== this.readyState) {
        this.polling = false;
        this.emitReserved("pollComplete");
        if ("open" === this.readyState) {
          this.poll();
        } else {
          polling_transport._logger.fine("ignoring poll - transport state \"" + dart.str(this.readyState) + "\"");
        }
      }
    }
    doClose() {
      let self = this;
      function close(_ = null) {
        polling_transport._logger.fine("writing close packet");
        self.write([new _js_helper.IdentityMap.from(T.IdentityMapOfString$String(), ["type", "close"])]);
      }
      dart.fn(close, T.dynamicToNull$1());
      if ("open" === this.readyState) {
        polling_transport._logger.fine("transport open - closing");
        close();
      } else {
        polling_transport._logger.fine("transport not open - deferring close");
        this.once("open", close);
      }
    }
    write(packets) {
      let self = this;
      this.writable = false;
      parser.PacketParser.encodePayload(packets, {callback: dart.fn(data => {
          self.doWrite(data, dart.fn(_ => {
            self.writable = true;
            self.emitReserved("drain");
          }, T.dynamicToNull()));
        }, T.dynamicToNull())});
    }
    uri() {
      let t$3633;
      let query = (t$3633 = this.query, t$3633 == null ? new _js_helper.IdentityMap.new(T.IdentityMapOfString$dynamic()) : t$3633);
      let schema = dart.dtest(this.opts[$_get]("secure")) ? "https" : "http";
      if (this.opts[$_get]("timestampRequests") != null) {
        query[$_set](dart_rti._asString(this.opts[$_get]("timestampParam")), new core.DateTime.now().millisecondsSinceEpoch[$toRadixString](36));
      }
      if (this.supportsBinary === false && !query[$containsKey]("sid")) {
        query[$_set]("b64", 1);
      }
      return this.createUri(schema, query);
    }
    request(opts = null) {
      let t$3633;
      opts = (t$3633 = opts, t$3633 == null ? new _js_helper.LinkedMap.new(T.LinkedMap()) : t$3633);
      let mergedOpts = (() => {
        let t$3633 = collection.LinkedHashMap.of(T.LinkedHashMap(), opts);
        t$3633[$_set](this.xd, this.xd);
        t$3633[$_set](this.cookieJar, this.cookieJar);
        t$3633[$addAll](this.opts);
        return t$3633;
      })();
      return new polling_transport.Request.new(this.uri(), mergedOpts);
    }
    doWrite(data, fn) {
      let isBinary = !(typeof data == 'string');
      let req = this.request(new _js_helper.LinkedMap.from(T.LinkedMap(), ["method", "POST", "data", data, "isBinary", isBinary]));
      req.on("success", T.dynamicTodynamic()[_as](fn));
      req.on("error", dart.fn(err => {
        this.onError("xhr post error", err);
      }, T.dynamicToNull()));
    }
    doPoll() {
      polling_transport._logger.fine("xhr poll");
      let req = this.request();
      req.on("data", dart.fn(data => {
        this.onData(data);
      }, T.dynamicToNull()));
      req.on("error", dart.fn(xhrStatus => {
        this.onError("xhr poll error", xhrStatus);
      }, T.dynamicToNull()));
      this.pollXhr = req;
    }
  };
  (polling_transport.PollingTransport.new = function(opts) {
    this[name$] = "polling";
    this[polling] = false;
    this[pollXhr] = null;
    this[cookieJar] = null;
    this[__PollingTransport_xd] = null;
    dart.global.Object.getPrototypeOf(polling_transport.PollingTransport).new.call(this, opts);
    let isSSL = js_util.getProperty(T.String(), js_util.getProperty(T.JSObject$2(), js_util.getProperty(T.JSObject$3(), dart.global, "window"), "location"), "protocol") === "https:";
    let port = js_util.getProperty(T.String(), js_util.getProperty(T.JSObject$2(), js_util.getProperty(T.JSObject$3(), dart.global, "window"), "location"), "port");
    if (port[$isEmpty]) {
      port = isSSL ? "443" : "80";
    }
    this.xd = !dart.equals(opts[$_get]("hostname"), js_util.getProperty(T.String(), js_util.getProperty(T.JSObject$2(), js_util.getProperty(T.JSObject$3(), dart.global, "window"), "location"), "hostname")) || port !== opts[$_get]("port");
    let forceBase64 = opts[$containsKey]("forceBase64") && dart.dtest(opts[$_get]("forceBase64"));
    this.supportsBinary = polling_transport._hasXHR2() && !forceBase64;
    if (opts[$containsKey]("withCredentials") && dart.dtest(opts[$_get]("withCredentials"))) {
    }
  }).prototype = polling_transport.PollingTransport.prototype;
  dart.lazyFn(polling_transport.PollingTransport['_#new#tearOff'], () => T.MapToPollingTransport());
  dart.addRtiResources(polling_transport.PollingTransport, ["socket_io_client__src__engine__transport__polling_transport|PollingTransport"]);
  dart.setMethodSignature(polling_transport.PollingTransport, () => dart.global.Object.setPrototypeOf({
    doOpen: _ti => T.VoidTovoid(),
    poll: _ti => T.VoidTovoid(),
    doClose: _ti => T.VoidTovoid(),
    write: _ti => T.ListTovoid(),
    uri: _ti => T.VoidToString(),
    request: _ti => T.MapNToRequest(),
    doWrite: _ti => T.dynamicAnddynamicTovoid(),
    doPoll: _ti => T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(polling_transport.PollingTransport))));
  dart.setMethodsImmediateTargetSignature(polling_transport.PollingTransport, () => dart.global.Object.setPrototypeOf({
    doOpen: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    pause: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    poll: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    onData: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    doClose: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    write: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    uri: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    request: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    doWrite: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport",
    doPoll: "package:socket_io_client/src/engine/transport/polling_transport.dart:PollingTransport"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(polling_transport.PollingTransport))));
  dart.setGetterSignature(polling_transport.PollingTransport, () => dart.global.Object.setPrototypeOf({
    xd: _ti => T.bool()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(polling_transport.PollingTransport))));
  dart.setSetterSignature(polling_transport.PollingTransport, () => dart.global.Object.setPrototypeOf({
    xd: _ti => T.bool()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(polling_transport.PollingTransport))));
  dart.setLibraryUri(polling_transport.PollingTransport, I[15]);
  dart.setFieldSignature(polling_transport.PollingTransport, () => dart.global.Object.setPrototypeOf({
    name: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    polling: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    pollXhr: {
      type: _ti => T.dynamic(),
      isConst: false,
      isFinal: false
    },
    cookieJar: {
      type: _ti => T.dynamic(),
      isConst: false,
      isFinal: false
    },
    [__PollingTransport_xd]: {
      type: _ti => T.boolN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(polling_transport.PollingTransport))));
  var xhr = dart.privateName(polling_transport, "Request.xhr");
  var index = dart.privateName(polling_transport, "Request.index");
  var readyStateChange = dart.privateName(polling_transport, "Request.readyStateChange");
  var __Request_opts = dart.privateName(polling_transport, "_#Request#opts");
  var __Request_method = dart.privateName(polling_transport, "_#Request#method");
  var __Request_uri = dart.privateName(polling_transport, "_#Request#uri");
  var __Request_data = dart.privateName(polling_transport, "_#Request#data");
  var __Request_data_isSet = dart.privateName(polling_transport, "_#Request#data#isSet");
  polling_transport.Request = class Request extends event_emitter.EventEmitter {
    get xhr() {
      return this[xhr];
    }
    set xhr(value) {
      this[xhr] = value;
    }
    get index() {
      return this[index];
    }
    set index(value) {
      this[index] = value;
    }
    get readyStateChange() {
      return this[readyStateChange];
    }
    set readyStateChange(value) {
      this[readyStateChange] = value;
    }
    get opts() {
      let t$3634;
      t$3634 = this[__Request_opts];
      return t$3634 == null ? dart.throw(new _internal.LateError.fieldNI("opts")) : t$3634;
    }
    set opts(opts$35param) {
      this[__Request_opts] = opts$35param;
    }
    get method() {
      let t$3634;
      t$3634 = this[__Request_method];
      return t$3634 == null ? dart.throw(new _internal.LateError.fieldNI("method")) : t$3634;
    }
    set method(method$35param) {
      this[__Request_method] = method$35param;
    }
    get uri() {
      let t$3634;
      t$3634 = this[__Request_uri];
      return t$3634 == null ? dart.throw(new _internal.LateError.fieldNI("uri")) : t$3634;
    }
    set uri(uri$35param) {
      this[__Request_uri] = uri$35param;
    }
    get data() {
      return this[__Request_data_isSet] ? this[__Request_data] : dart.throw(new _internal.LateError.fieldNI("data"));
    }
    set data(data$35param) {
      this[__Request_data_isSet] = true;
      this[__Request_data] = data$35param;
    }
    static ['_#new#tearOff'](uri, opts) {
      return new polling_transport.Request.new(uri, opts);
    }
    create() {
      let t$3634, t$3634$, t$3637, t$3638;
      let opts = new _js_helper.IdentityMap.from(T.IdentityMapOfString$dynamic(), ["agent", this.opts[$_get]("agent"), "pfx", this.opts[$_get]("pfx"), "key", this.opts[$_get]("key"), "passphrase", this.opts[$_get]("passphrase"), "cert", this.opts[$_get]("cert"), "ca", this.opts[$_get]("ca"), "ciphers", this.opts[$_get]("ciphers"), "rejectUnauthorized", this.opts[$_get]("rejectUnauthorized"), "autoUnref", this.opts[$_get]("autoUnref")]);
      opts[$_set]("xdomain", (t$3634 = this.opts[$_get]("xd"), t$3634 == null ? false : t$3634));
      let xhr = this.xhr = T.JSObject$1()[_as](new dart.global.XMLHttpRequest());
      let self = this;
      try {
        polling_transport._logger.fine("xhr open " + this.method + ": " + this.uri);
        xhr.open(this.method, this.uri, true);
        try {
          if (this.opts[$containsKey]("extraHeaders") && dart.equals((t$3634$ = this.opts[$_get]("extraHeaders"), t$3634$ == null ? null : dart.dload(t$3634$, 'isNotEmpty')), true)) {
            dart.dsend(this.opts[$_get]("extraHeaders"), 'forEach', [dart.fn((k, v) => {
                xhr.setRequestHeader(dart_rti._asString(k), dart_rti._asString(v));
              }, T.dynamicAnddynamicToNull$1())]);
          }
        } catch (t$36$35e) {
          let e = dart.getThrown(t$36$35e);
          if (T.Object()[_is](e)) {
          } else
            throw t$36$35e;
        }
        if ("POST" === this.method) {
          try {
            xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
          } catch (t$36$35e$) {
            let e$ = dart.getThrown(t$36$35e$);
            if (T.Object()[_is](e$)) {
            } else
              throw t$36$35e$;
          }
        }
        try {
          xhr.setRequestHeader("Accept", "*/*");
        } catch (t$36$35e$0) {
          let e$0 = dart.getThrown(t$36$35e$0);
          if (T.Object()[_is](e$0)) {
          } else
            throw t$36$35e$0;
        }
        t$3637 = this.opts[$_get]("cookieJar");
        t$3637 == null ? null : dart.dsend(t$3637, 'addCookies', [xhr]);
        if (this.opts[$containsKey]("requestTimeout")) {
          xhr.timeout = dart_rti._asInt(this.opts[$_get]("requestTimeout"));
        }
        this.readyStateChange = events['XHRGetters|get#onReadyStateChange'](xhr).listen(dart.fn(evt => {
          if (js_util.getProperty(T.int(), xhr, "readyState") === 2) {
            let contentType = null;
            try {
              contentType = dart_rti._asStringQ(xhr.getResponseHeader("Content-Type"));
            } catch (t$36$35e) {
              let e = dart.getThrown(t$36$35e);
              if (T.Object()[_is](e)) {
              } else
                throw t$36$35e;
            }
            if (dart.equals(contentType, "application/octet-stream")) {
              xhr.responseType = "arraybuffer";
            }
          }
          if (4 !== js_util.getProperty(T.int(), xhr, "readyState")) return;
          if (200 === js_util.getProperty(T.int(), xhr, "status") || 1223 === js_util.getProperty(T.int(), xhr, "status")) {
            self.onLoad();
          } else {
            async.Timer.run(dart.fn(() => self.onError(js_util.getProperty(T.int(), xhr, "status")), T.VoidTovoid()));
          }
        }, T.JSObjectTovoid()));
        polling_transport._logger.fine("xhr data " + dart.str(this.data));
        xhr.send((t$3638 = this.data, t$3638 == null ? null : js_interop['NullableObjectUtilExtension|jsify'](t$3638)));
      } catch (t$36$35e$1) {
        let e$1 = dart.getThrown(t$36$35e$1);
        if (T.Object()[_is](e$1)) {
          async.Timer.run(dart.fn(() => this.onError(e$1), T.VoidTovoid()));
          return;
        } else
          throw t$36$35e$1;
      }
    }
    onError(err) {
      this.emitReserved("error", err);
      this.cleanup(true);
    }
    cleanup(fromError = null) {
      let t$3639;
      if (this.xhr == null) {
        return;
      }
      t$3639 = this.readyStateChange;
      t$3639 == null ? null : t$3639.cancel();
      this.readyStateChange = null;
      if (fromError != null) {
        try {
          dart.nullCheck(this.xhr).abort();
        } catch (t$36$35e) {
          let e = dart.getThrown(t$36$35e);
          if (T.Object()[_is](e)) {
          } else
            throw t$36$35e;
        }
      }
      this.xhr = null;
    }
    onLoad() {
      let data = js_util.getProperty(T.String(), dart.nullCheck(this.xhr), "responseText");
      if (data[$isNotEmpty]) {
        this.emitReserved("data", data);
        this.emitReserved("success");
        this.cleanup();
      }
    }
    abort() {
      return this.cleanup();
    }
  };
  (polling_transport.Request.new = function(uri, opts) {
    let t$3634;
    this[__Request_opts] = null;
    this[__Request_method] = null;
    this[__Request_uri] = null;
    this[__Request_data] = null;
    this[__Request_data_isSet] = false;
    this[xhr] = null;
    this[index] = null;
    this[readyStateChange] = null;
    this[__Request_uri] = uri;
    this[__Request_opts] = opts;
    dart.global.Object.getPrototypeOf(polling_transport.Request).new.call(this);
    this.method = dart_rti._asString((t$3634 = this.opts[$_get]("method"), t$3634 == null ? "GET" : t$3634));
    this.data = dart_rti._asStringQ(this.opts[$_get]("data"));
    this.create();
  }).prototype = polling_transport.Request.prototype;
  dart.lazyFn(polling_transport.Request['_#new#tearOff'], () => T.StringAndMapToRequest());
  dart.addRtiResources(polling_transport.Request, ["socket_io_client__src__engine__transport__polling_transport|Request"]);
  dart.setMethodSignature(polling_transport.Request, () => dart.global.Object.setPrototypeOf({
    create: _ti => T.VoidTovoid(),
    onError: _ti => T.dynamicTovoid$1(),
    cleanup: _ti => T.dynamicTovoid(),
    onLoad: _ti => T.VoidTovoid(),
    abort: _ti => T.VoidTovoid()
  }, dart.getMethods(dart.global.Object.getPrototypeOf(polling_transport.Request))));
  dart.setMethodsImmediateTargetSignature(polling_transport.Request, () => dart.global.Object.setPrototypeOf({
    create: "package:socket_io_client/src/engine/transport/polling_transport.dart:Request",
    onError: "package:socket_io_client/src/engine/transport/polling_transport.dart:Request",
    cleanup: "package:socket_io_client/src/engine/transport/polling_transport.dart:Request",
    onLoad: "package:socket_io_client/src/engine/transport/polling_transport.dart:Request",
    abort: "package:socket_io_client/src/engine/transport/polling_transport.dart:Request"
  }, dart.getMethodsImmediateTargets(dart.global.Object.getPrototypeOf(polling_transport.Request))));
  dart.setGetterSignature(polling_transport.Request, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map(),
    method: _ti => T.String(),
    uri: _ti => T.String(),
    data: _ti => T.StringN()
  }, dart.getGetters(dart.global.Object.getPrototypeOf(polling_transport.Request))));
  dart.setSetterSignature(polling_transport.Request, () => dart.global.Object.setPrototypeOf({
    opts: _ti => T.Map(),
    method: _ti => T.String(),
    uri: _ti => T.String(),
    data: _ti => T.StringN()
  }, dart.getSetters(dart.global.Object.getPrototypeOf(polling_transport.Request))));
  dart.setLibraryUri(polling_transport.Request, I[15]);
  dart.setFieldSignature(polling_transport.Request, () => dart.global.Object.setPrototypeOf({
    [__Request_opts]: {
      type: _ti => T.MapN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Request_method]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Request_uri]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Request_data]: {
      type: _ti => T.StringN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [__Request_data_isSet]: {
      type: _ti => T.bool(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    xhr: {
      type: _ti => T.JSObjectN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[14]
    },
    index: {
      type: _ti => T.intN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    readyStateChange: {
      type: _ti => T.StreamSubscriptionN(),
      isConst: false,
      isFinal: false,
      libraryUri: I[10]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(polling_transport.Request))));
  polling_transport._hasXHR2 = function _hasXHR2() {
    try {
      let xhr = T.JSObject$1()[_as](new dart.global.XMLHttpRequest());
      xhr.responseType = "arraybuffer";
      return true;
    } catch (t$36$35e) {
      let e = dart.getThrown(t$36$35e);
      if (T.Object()[_is](e)) {
        return false;
      } else
        throw t$36$35e;
    }
  };
  dart.lazyFn(polling_transport._hasXHR2, () => T.VoidTobool());
  dart.defineLazy(polling_transport, {
    /*polling_transport._logger*/get _logger() {
      return logger.Logger.new("socket_io:transport.PollingTransport");
    }
  });
  (function() {
  }).prototype = polling_transport;
  parseqs.encode = function encode(obj) {
    let str = "";
    for (let i of obj[$keys]) {
      if (str[$isNotEmpty]) str = str + "&";
      str = str + (core.Uri.encodeComponent(dart.str(i)) + "=" + core.Uri.encodeComponent(dart.str(obj[$_get](i))));
    }
    return str;
  };
  dart.lazyFn(parseqs.encode, () => T.MapToString());
  parseqs.decode = function decode(qs) {
    if (dart.dtest(dart.dload(qs, 'isEmpty'))) {
      return new _js_helper.LinkedMap.new(T.LinkedMap());
    }
    let qry = new _js_helper.LinkedMap.new(T.LinkedMap());
    let pairs = dart.dsend(qs, 'split', ["&"]);
    for (let i = 0, l = dart.dload(pairs, 'length'); i < dart_rti._asNum(l); i = i + 1) {
      let pair = dart.dsend(dart.dsend(pairs, '_get', [i]), 'split', ["="]);
      qry[$_set](core.Uri.decodeComponent(dart_rti._asString(dart.dsend(pair, '_get', [0]))), core.Uri.decodeComponent(dart_rti._asString(dart.dsend(pair, '_get', [1]))));
    }
    return qry;
  };
  dart.lazyFn(parseqs.decode, () => T.dynamicToMap());
  (function() {
  }).prototype = parseqs;
  dart.moduleConstCaches.set("packages/socket_io_client/socket_io_client", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"socket_io_client__src__socket|Socket":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"_js_helper|LinkedMap":{"LinkedMap.K":"1","LinkedMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"_js_helper|InternalMap":{"InternalMap.K":"1","InternalMap.V":"2","MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|MapBase":{"MapBase.K":"1","MapBase.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|LinkedHashMap":{"LinkedHashMap.K":"1","LinkedHashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"collection|HashMap":{"HashMap.K":"1","HashMap.V":"2","Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|Map":{"Map.K":"1","Map.V":"2"},"socket_io_client__src__manager|Manager":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"_js_helper|IdentityMap":{"IdentityMap.K":"1","IdentityMap.V":"2","InternalMap.K":"1","InternalMap.V":"2","_js_helper|InternalMap":["1","2"],"MapBase.K":"1","MapBase.V":"2","collection|MapBase":["1","2"],"LinkedHashMap.K":"1","LinkedHashMap.V":"2","collection|LinkedHashMap":["1","2"],"HashMap.K":"1","HashMap.V":"2","collection|HashMap":["1","2"],"Map.K":"1","Map.V":"2","core|Map":["1","2"]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|Comparable":{"Comparable.T":"1"},"socket_io_common__src__parser__parser|Decoder":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"async|Completer":{"Completer.T":"1"},"async|Future":{"Future.T":"1"},"socket_io_client__src__engine__socket|Socket":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"socket_io_client__src__engine__transport__html_http_client_adapter|HtmlHttpClientAdapter":{"socket_io_client__src__engine__transport__http_client_adapter|HttpClientAdapter":[]},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"socket_io_client__src__engine__transport|Transport":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"socket_io_client__src__engine__transport__websocket_transport|WebSocketTransport":{"socket_io_client__src__engine__transport|Transport":[],"socket_io_common__src__util__event_emitter|EventEmitter":[]},"socket_io_client__src__engine__transport__polling_transport|PollingTransport":{"socket_io_client__src__engine__transport|Transport":[],"socket_io_common__src__util__event_emitter|EventEmitter":[]},"socket_io_client__src__engine__transport__polling_transport|Request":{"socket_io_common__src__util__event_emitter|EventEmitter":[]},"async|StreamSubscription":{"StreamSubscription.T":"1"}}'));
  dart.trackLibraries("packages/socket_io_client/socket_io_client", {
    "package:socket_io_client/socket_io_client.dart": socket_io_client,
    "package:socket_io_client/src/engine/transport/http_client_adapter.dart": http_client_adapter,
    "package:socket_io_client/src/darty.dart": darty,
    "package:socket_io_client/src/socket.dart": socket,
    "package:socket_io_client/src/on.dart": on,
    "package:socket_io_client/src/manager.dart": manager,
    "package:socket_io_client/src/engine/transport/http_client_adapter_factory.dart": http_client_adapter_factory,
    "package:socket_io_client/src/engine/transport/html_http_client_adapter.dart": html_http_client_adapter,
    "package:socket_io_client/src/engine/socket.dart": socket$,
    "package:socket_io_client/src/engine/transport/transports.dart": transports,
    "package:socket_io_client/src/engine/transport/websocket_transport.dart": websocket_transport,
    "package:socket_io_client/src/engine/transport.dart": transport,
    "package:socket_io_client/src/engine/transport/polling_transport.dart": polling_transport,
    "package:socket_io_client/src/engine/parseqs.dart": parseqs
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["socket_io_client.dart","src/engine/transport/http_client_adapter.dart","src/darty.dart","src/socket.dart","src/on.dart","src/manager.dart","src/engine/transport/http_client_adapter_factory.dart","src/engine/transport/html_http_client_adapter.dart","src/engine/socket.dart","src/engine/transport/transports.dart","src/engine/transport.dart","src/engine/transport/websocket_transport.dart","src/engine/transport/polling_transport.dart","src/engine/parseqs.dart"],"names":[],"mappings":"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","file":"socket_io_client.ddc.js"}');
  // Exports:
  return {
    socket_io_client__socket_io_client: socket_io_client,
    socket_io_client__src__engine__transport__http_client_adapter: http_client_adapter,
    socket_io_client__src__darty: darty,
    socket_io_client__src__socket: socket,
    socket_io_client__src__on: on,
    socket_io_client__src__manager: manager,
    socket_io_client__src__engine__transport__http_client_adapter_factory: http_client_adapter_factory,
    socket_io_client__src__engine__transport__html_http_client_adapter: html_http_client_adapter,
    socket_io_client__src__engine__socket: socket$,
    socket_io_client__src__engine__transport__transports: transports,
    socket_io_client__src__engine__transport__websocket_transport: websocket_transport,
    socket_io_client__src__engine__transport: transport,
    socket_io_client__src__engine__transport__polling_transport: polling_transport,
    socket_io_client__src__engine__parseqs: parseqs
  };
}));

//# sourceMappingURL=socket_io_client.ddc.js.map
